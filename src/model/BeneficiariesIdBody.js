/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {BeneficiariesSddB2bWhitelist} from './BeneficiariesSddB2bWhitelist';

/**
 * The BeneficiariesIdBody model module.
 * @module model/BeneficiariesIdBody
 * @version 0.1.1
 */
export class BeneficiariesIdBody {
  /**
   * Constructs a new <code>BeneficiariesIdBody</code>.
   * @alias module:model/BeneficiariesIdBody
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>BeneficiariesIdBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BeneficiariesIdBody} obj Optional instance to populate.
   * @return {module:model/BeneficiariesIdBody} The populated <code>BeneficiariesIdBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new BeneficiariesIdBody();
      if (data.hasOwnProperty('tag'))
        obj.tag = ApiClient.convertToType(data['tag'], 'String');
      if (data.hasOwnProperty('nickName'))
        obj.nickName = ApiClient.convertToType(data['nickName'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('address'))
        obj.address = ApiClient.convertToType(data['address'], 'String');
      if (data.hasOwnProperty('iban'))
        obj.iban = ApiClient.convertToType(data['iban'], 'String');
      if (data.hasOwnProperty('bic'))
        obj.bic = ApiClient.convertToType(data['bic'], 'String');
      if (data.hasOwnProperty('isActive'))
        obj.isActive = ApiClient.convertToType(data['isActive'], 'Boolean');
      if (data.hasOwnProperty('sepaCreditorIdentifier'))
        obj.sepaCreditorIdentifier = ApiClient.convertToType(data['sepaCreditorIdentifier'], 'String');
      if (data.hasOwnProperty('sddB2bWhitelist'))
        obj.sddB2bWhitelist = ApiClient.convertToType(data['sddB2bWhitelist'], [BeneficiariesSddB2bWhitelist]);
      if (data.hasOwnProperty('sddCoreBlacklist'))
        obj.sddCoreBlacklist = ApiClient.convertToType(data['sddCoreBlacklist'], ['String']);
      if (data.hasOwnProperty('usableForSct'))
        obj.usableForSct = ApiClient.convertToType(data['usableForSct'], 'Boolean');
      if (data.hasOwnProperty('fields'))
        obj.fields = ApiClient.convertToType(data['fields'], ['String']);
    }
    return obj;
  }
}

/**
 * Custom data that could be used by caller to search the instance.
 * @member {String} tag
 */
BeneficiariesIdBody.prototype.tag = undefined;

/**
 * Name choosen by end user to easily recognize the beneficiary.
 * @member {String} nickName
 */
BeneficiariesIdBody.prototype.nickName = undefined;

/**
 * Beneficiary name, linked to bank account.
 * @member {String} name
 */
BeneficiariesIdBody.prototype.name = undefined;

/**
 * Beneficiary address, linked to bank account.
 * @member {String} address
 */
BeneficiariesIdBody.prototype.address = undefined;

/**
 * Beneficiary International Bank Account Number. Mandatory if usableForSct is true.
 * @member {String} iban
 */
BeneficiariesIdBody.prototype.iban = undefined;

/**
 * Beneficiary Bank Identifier Code. Mandatory if usableForSct is true.
 * @member {String} bic
 */
BeneficiariesIdBody.prototype.bic = undefined;

/**
 * Beneficiary is activate.
 * @member {Boolean} isActive
 */
BeneficiariesIdBody.prototype.isActive = undefined;

/**
 * Beneficiary SEPA Creditor Identifier. Mandatory to validate incoming direct debit, useless other wise. Between 8 and 35 caracters. If sddB2bWhitelist or sddCoreBlacklist is provided then sepaCreditorIdentifier is mandatory.
 * @member {String} sepaCreditorIdentifier
 */
BeneficiariesIdBody.prototype.sepaCreditorIdentifier = undefined;

/**
 * Each unique mandate reference, with its frequency type, must be explicitely allowed when doing B2B Direct Debit. Furthermore, a mandate not used during more than 36 months will be automatically rejected even if in the white list.
 * @member {Array.<module:model/BeneficiariesSddB2bWhitelist>} sddB2bWhitelist
 */
BeneficiariesIdBody.prototype.sddB2bWhitelist = undefined;

/**
 * Core Direct Debit are accepted by default. If a Core mandate is to be refused on reception, it has to be added to this list. If wild char * (star) is used instead of a UMR, all Direct Debit from this beneficiary will be refused.
 * @member {Array.<String>} sddCoreBlacklist
 */
BeneficiariesIdBody.prototype.sddCoreBlacklist = undefined;

/**
 * Indicated if the beneficiary can be used for SEPA Credit Transfer. This field is a conveniant way to filter all beneficiaries for a user that would like to do a Credit Transfer. Indeed, beneficaries are created automatically when receiving a Core Direct Debit and therefor by looking at the list you won't be able to idnetify which beneficary to use on SCT.
 * @member {Boolean} usableForSct
 * @default false
 */
BeneficiariesIdBody.prototype.usableForSct = false;

/**
 * List of the object's properties you want to pick up.
 * @member {Array.<String>} fields
 */
BeneficiariesIdBody.prototype.fields = undefined;


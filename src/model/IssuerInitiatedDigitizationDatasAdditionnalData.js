/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The IssuerInitiatedDigitizationDatasAdditionnalData model module.
 * @module model/IssuerInitiatedDigitizationDatasAdditionnalData
 * @version 0.1.1
 */
export class IssuerInitiatedDigitizationDatasAdditionnalData {
  /**
   * Constructs a new <code>IssuerInitiatedDigitizationDatasAdditionnalData</code>.
   * This parameter is required in the case of APPLE tokenRequestor
   * @alias module:model/IssuerInitiatedDigitizationDatasAdditionnalData
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IssuerInitiatedDigitizationDatasAdditionnalData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IssuerInitiatedDigitizationDatasAdditionnalData} obj Optional instance to populate.
   * @return {module:model/IssuerInitiatedDigitizationDatasAdditionnalData} The populated <code>IssuerInitiatedDigitizationDatasAdditionnalData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IssuerInitiatedDigitizationDatasAdditionnalData();
      if (data.hasOwnProperty('certificates'))
        obj.certificates = ApiClient.convertToType(data['certificates'], ['String']);
      if (data.hasOwnProperty('nonce'))
        obj.nonce = ApiClient.convertToType(data['nonce'], 'String');
      if (data.hasOwnProperty('nonceSignature'))
        obj.nonceSignature = ApiClient.convertToType(data['nonceSignature'], 'Blob');
    }
    return obj;
  }
}

/**
 * The certificate chain. Required when tokenRequestor is APPLE. The first element of array is the leaf certificate and the last should be the root certificate. There can be 0 or several sub certificates inbetween the first element of array and the last. All certificates are of type string (base64 encoded of DER format)
 * @member {Array.<String>} certificates
 */
IssuerInitiatedDigitizationDatasAdditionnalData.prototype.certificates = undefined;

/**
 * The nonce as provided by the Apple SDK. Required when tokenRequestor is APPLE
 * @member {String} nonce
 */
IssuerInitiatedDigitizationDatasAdditionnalData.prototype.nonce = undefined;

/**
 * The nonce signature as provided by the Apple SDK. Required when tokenRequestor is APPLE
 * @member {Blob} nonceSignature
 */
IssuerInitiatedDigitizationDatasAdditionnalData.prototype.nonceSignature = undefined;


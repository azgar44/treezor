/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponseDefault} from '../model/InlineResponseDefault';

/**
* Bankaccount service.
* @module api/BankaccountApi
* @version 0.1.1
*/
export class BankaccountApi {

    /**
    * Constructs a new BankaccountApi. 
    * @alias module:api/BankaccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteBankaccount operation.
     * @callback moduleapi/BankaccountApi~deleteBankaccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deactivate a bank account
     * Change bank account&#x27;s status to CANCELED. If a payout is being validated on this bank account, it can not be canceled.
     * @param {Number} id Bank Accounts internal id.
     * @param {module:api/BankaccountApi~deleteBankaccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteBankaccount(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBankaccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/bankaccounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBankaccount operation.
     * @callback moduleapi/BankaccountApi~getBankaccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a bank account
     * Get a bank account from the system.
     * @param {Number} id Bank Accounts internal id.
     * @param {module:api/BankaccountApi~getBankaccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBankaccount(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBankaccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/bankaccounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBankaccounts operation.
     * @callback moduleapi/BankaccountApi~getBankaccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search bank accounts
     * Get bank accounts that match search criteria.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.bankaccountId bank account id.
     * @param {String} opts.bankaccountStatus bank account status. Possible values: * CANCELED * PENDING * VALIDATED 
     * @param {Number} opts.userId Bank account owner user&#x27;s id
     * @param {String} opts.bankaccountIBAN Bank account IBAN
     * @param {Number} opts.pageNumber Pagination page number. More info [here](https://agent.treezor.com/lists). 
     * @param {Number} opts.pageCount The number of items per page. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortBy The transaction element you want to sort the list with. Default value : _createdDate_. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
     * @param {Date} opts.createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {module:api/BankaccountApi~getBankaccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBankaccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'bankaccountId': opts['bankaccountId'],'bankaccountStatus': opts['bankaccountStatus'],'userId': opts['userId'],'bankaccountIBAN': opts['bankaccountIBAN'],'pageNumber': opts['pageNumber'],'pageCount': opts['pageCount'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'createdDateFrom': opts['createdDateFrom'],'createdDateTo': opts['createdDateTo'],'updatedDateFrom': opts['updatedDateFrom'],'updatedDateTo': opts['updatedDateTo']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/bankaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postBankaccount operation.
     * @callback moduleapi/BankaccountApi~postBankaccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a bank account
     * Create a new benefeciary bank account in the system.
     * @param {Number} userId Owner user&#x27;s id.
     * @param {String} bankaccountOwnerName Bank account owner&#x27;s name.
     * @param {String} bankaccountOwnerAddress Bank account owner&#x27;s address.
     * @param {String} bankaccountIBAN Beneficiary bank account&#x27;s IBAN.
     * @param {String} bankaccountBIC Beneficiary bank account&#x27;s BIC (or SWIFT).
     * @param {module:model/String} bankaccountType Beneficiary bank account&#x27;s type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.bankaccountTag Custom data.
     * @param {String} opts.name Bank account&#x27;s name.
     * @param {module:api/BankaccountApi~postBankaccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postBankaccount(userId, bankaccountOwnerName, bankaccountOwnerAddress, bankaccountIBAN, bankaccountBIC, bankaccountType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postBankaccount");
      }
      // verify the required parameter 'bankaccountOwnerName' is set
      if (bankaccountOwnerName === undefined || bankaccountOwnerName === null) {
        throw new Error("Missing the required parameter 'bankaccountOwnerName' when calling postBankaccount");
      }
      // verify the required parameter 'bankaccountOwnerAddress' is set
      if (bankaccountOwnerAddress === undefined || bankaccountOwnerAddress === null) {
        throw new Error("Missing the required parameter 'bankaccountOwnerAddress' when calling postBankaccount");
      }
      // verify the required parameter 'bankaccountIBAN' is set
      if (bankaccountIBAN === undefined || bankaccountIBAN === null) {
        throw new Error("Missing the required parameter 'bankaccountIBAN' when calling postBankaccount");
      }
      // verify the required parameter 'bankaccountBIC' is set
      if (bankaccountBIC === undefined || bankaccountBIC === null) {
        throw new Error("Missing the required parameter 'bankaccountBIC' when calling postBankaccount");
      }
      // verify the required parameter 'bankaccountType' is set
      if (bankaccountType === undefined || bankaccountType === null) {
        throw new Error("Missing the required parameter 'bankaccountType' when calling postBankaccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'bankaccountTag': opts['bankaccountTag'],'userId': userId,'name': opts['name'],'bankaccountOwnerName': bankaccountOwnerName,'bankaccountOwnerAddress': bankaccountOwnerAddress,'bankaccountIBAN': bankaccountIBAN,'bankaccountBIC': bankaccountBIC,'bankaccountType': bankaccountType
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/bankaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
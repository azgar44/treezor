/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BeneficiariesBody} from '../model/BeneficiariesBody';
import {BeneficiariesIdBody} from '../model/BeneficiariesIdBody';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponseDefault} from '../model/InlineResponseDefault';

/**
* Beneficiaries service.
* @module api/BeneficiariesApi
* @version 0.1.1
*/
export class BeneficiariesApi {

    /**
    * Constructs a new BeneficiariesApi. 
    * @alias module:api/BeneficiariesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getBeneficiaries operation.
     * @callback moduleapi/BeneficiariesApi~getBeneficiariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search beneficiary bank accounts
     * Get beneficiary bank accounts that match search criteria.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Array.<String>} opts.fields List of the object&#x27;s properties you want to pick up.
     * @param {String} opts.filter You can filter the API response by using filter(s). Filterable fields are :  - id  - tag  - userId  - isActive (1 for yes, 0 for no)  - nickName  - address  - iban (encrypted IBAN)  - IbanInClear  - bic  - sepaCreditorIdentifier  - usableForSct  - createdDate  - modifiedDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters : FILTER1;FILTER2;FILTER3. A single filter has the following syntax : \&quot;fieldName criterion expression\&quot;. Where :  - fieldName : the name of a filterable field of this object.   - expression : the values to be included or excluded (see the table below for more information)   - criterion : a filter criterion.  Here are the possible values for criterion :   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        | 
     * @param {Number} opts.id Beneficiary bank account id.
     * @param {Number} opts.userId Owner user&#x27;s id. (deprecated, you must use the parameter filter)
     * @param {String} opts.iban Beneficiary bank account IBAN. (deprecated, you must use the parameter filter)
     * @param {String} opts.bic Beneficiary bank account BIC. (deprecated, you must use the parameter filter)
     * @param {String} opts.nickName Beneficiary bank account&#x27;s nick name. (deprecated, you must use the parameter filter)
     * @param {String} opts.name Beneficiary bank account owner&#x27;s name. (deprecated, you must use the parameter filter)
     * @param {Number} opts.pageNumber Pagination page number. More info [here](https://agent.treezor.com/lists). 
     * @param {Number} opts.pageCount The number of items per page. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortBy The transaction element you want to sort the list with. Default value : _createdDate_. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
     * @param {module:api/BeneficiariesApi~getBeneficiariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBeneficiaries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),'filter': opts['filter'],'id': opts['id'],'userId': opts['userId'],'iban': opts['iban'],'bic': opts['bic'],'nickName': opts['nickName'],'name': opts['name'],'pageNumber': opts['pageNumber'],'pageCount': opts['pageCount'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/beneficiaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBeneficiary operation.
     * @callback moduleapi/BeneficiariesApi~getBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a beneficiary bank account
     * Get a beneficiary bank account from the system.
     * @param {Number} id Beneficiary Bank Accounts internal id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields List of the object&#x27;s properties you want to pick up.
     * @param {module:api/BeneficiariesApi~getBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBeneficiary(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBeneficiary");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/beneficiaries/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postBeneficiary operation.
     * @callback moduleapi/BeneficiariesApi~postBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a beneficiary
     * Create a new benefeciary bank account in the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/BeneficiariesBody} opts.body 
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Array} opts.sddB2bWhitelist Each unique mandate reference, with its frequency type, must be explicitely allowed when doing B2B Direct Debit. **The entry is not case sensitive.** Furthermore, a mandate not used during more than 36 months will be automatically rejected even if in the white list. 
     * @param {Array.<String>} opts.sddCoreBlacklist Core Direct Debit are accepted by default. If a Core mandate is to be refused on reception, its UMR has to be added to this list. **The entry is not case sensitive.** If wild char * (star) is used instead of a UMR, all Direct Debit from this beneficiary will be refused. 
     * @param {module:api/BeneficiariesApi~postBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postBeneficiary(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'sddB2bWhitelist': opts['sddB2bWhitelist'],'sddCoreBlacklist': this.apiClient.buildCollectionParam(opts['sddCoreBlacklist'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/beneficiaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putBeneficiary operation.
     * @callback moduleapi/BeneficiariesApi~putBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit a beneficiary
     * Edit a benefeciary bank account in the system.
     * @param {Number} id Beneficiary&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {module:model/BeneficiariesIdBody} opts.body 
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Array} opts.sddB2bWhitelist Each unique mandate reference, with its frequency type, must be explicitely allowed when doing B2B Direct Debit. **The entry is not case sensitive.** Furthermore, a mandate not used during more than 36 months will be automatically rejected even if in the white list. 
     * @param {Array.<String>} opts.sddCoreBlacklist Core Direct Debit are accepted by default. If a Core mandate is to be refused on reception, its UMR has to be added to this list. **The entry is not case sensitive.** If wild char * (star) is used instead of a UMR, all Direct Debit from this beneficiary will be refused. 
     * @param {module:api/BeneficiariesApi~putBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putBeneficiary(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putBeneficiary");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'sddB2bWhitelist': opts['sddB2bWhitelist'],'sddCoreBlacklist': this.apiClient.buildCollectionParam(opts['sddCoreBlacklist'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/beneficiaries/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20021} from '../model/InlineResponse20021';
import {InlineResponseDefault} from '../model/InlineResponseDefault';

/**
* RecallR service.
* @module api/RecallRApi
* @version 0.1.1
*/
export class RecallRApi {

    /**
    * Constructs a new RecallRApi. 
    * @alias module:api/RecallRApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getRecallR operation.
     * @callback moduleapi/RecallRApi~getRecallRCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get recalls or RRO
     * get recalls or RRO
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.pageCount Maximum number of elements in on call. By default 50. 
     * @param {Number} opts.pageNumber Page of asked resulset. By default it is the first page. 
     * @param {String} opts.filter List of available filters: - id - recallRSepaMessageId - cxlId - statusId - reasonCode - clientId - userId - walletId - sctrId - receivedDate - frozenWalletFollowingRecallr - createdDate - inError 
     * @param {module:api/RecallRApi~getRecallRCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRecallR(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'pageCount': opts['pageCount'],'pageNumber': opts['pageNumber'],'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/recallRs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRecallRId operation.
     * @callback moduleapi/RecallRApi~getRecallRIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get recalls or RRO
     * get recalls or RRO
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.pageCount Maximum number of elements in on call. By default 50. 
     * @param {Number} opts.pageNumber Page of asked resulset. By default it is the first page. 
     * @param {module:api/RecallRApi~getRecallRIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRecallRId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'pageCount': opts['pageCount'],'pageNumber': opts['pageNumber']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/recallRs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putRecallR operation.
     * @callback moduleapi/RecallRApi~putRecallRCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent on a recall or RRO
     * Consent on a recall or RRO
     * @param {Number} id Object internal id.
     * @param {module:model/Number} responseType Response to the received recall request. If 1, the recall request is accepted and it will generate a positive response to the originating bank. If 0, the recall request is refused. It will generate a negative response to the originating bank. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:model/String} opts.negativeResponseReasonCode Reason of negative response type. Required if responseType is false. This field is non case sensitive. 
     * @param {String} opts.negativeResponseAdditionalInformation Free field to add more informations of a negative response type. 
     * @param {String} opts.responseComment Free field to add more informations regardless the response type. 
     * @param {module:api/RecallRApi~putRecallRCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putRecallR(id, responseType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putRecallR");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling putRecallR");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'responseType': responseType,'negativeResponseReasonCode': opts['negativeResponseReasonCode'],'negativeResponseAdditionalInformation': opts['negativeResponseAdditionalInformation'],'responseComment': opts['responseComment']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/recallRs/{id}/response/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
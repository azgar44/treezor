/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20027} from '../model/InlineResponse20027';
import {InlineResponse201} from '../model/InlineResponse201';
import {InlineResponseDefault} from '../model/InlineResponseDefault';

/**
* User service.
* @module api/UserApi
* @version 0.1.1
*/
export class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback moduleapi/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a user
     * Change user&#x27;s status to **CANCELED**.
     * @param {Number} id User&#x27;s ID
     * @param {String} origin Origin of the request.  Possible values: * OPERATOR * USER 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteUser(id, origin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'origin': origin
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUser operation.
     * @callback moduleapi/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an user
     * Get user&#x27;s information for given user&#x27;s id.
     * @param {Number} id User&#x27;s ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUser(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback moduleapi/UserApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search users
     * Get users from the system.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.userId User&#x27;s unique ID
     * @param {Number} opts.userTypeId User&#x27;s type.
     * @param {String} opts.userStatus User&#x27;s status.
     * @param {String} opts.userTag Custom data that you can add to this item.
     * @param {Number} opts.specifiedUSPerson Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des Etats-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux Etats-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux Etats-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet Etat américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux Etats-Unis ou résidant de façon permanente aux Etats-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années. 
     * @param {Number} opts.controllingPersonType Type of relationship
     * @param {Number} opts.employeeType Type of user&#x27;s role
     * @param {String} opts.email User&#x27;s email address (must be valid).
     * @param {String} opts.name User&#x27;s Name.
     * @param {String} opts.legalName Business name
     * @param {String} opts.parentUserId User id of user&#x27;s parent
     * @param {Number} opts.pageNumber Pagination page number. More info [here](https://agent.treezor.com/lists). 
     * @param {Number} opts.pageCount The number of items per page. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortBy The transaction element you want to sort the list with. Default value: createdDate. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
     * @param {Date} opts.createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {module:api/UserApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'userId': opts['userId'],'userTypeId': opts['userTypeId'],'userStatus': opts['userStatus'],'userTag': opts['userTag'],'specifiedUSPerson': opts['specifiedUSPerson'],'controllingPersonType': opts['controllingPersonType'],'employeeType': opts['employeeType'],'email': opts['email'],'name': opts['name'],'legalName': opts['legalName'],'parentUserId': opts['parentUserId'],'pageNumber': opts['pageNumber'],'pageCount': opts['pageCount'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'createdDateFrom': opts['createdDateFrom'],'createdDateTo': opts['createdDateTo'],'updatedDateFrom': opts['updatedDateFrom'],'updatedDateTo': opts['updatedDateTo']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putUser operation.
     * @callback moduleapi/UserApi~putUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a user
     * Update user&#x27;s information.
     * @param {Number} id User&#x27;s ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.userTag Custom data.
     * @param {Number} opts.specifiedUSPerson Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des Etats-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux Etats-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux Etats-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet Etat américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux Etats-Unis ou résidant de façon permanente aux Etats-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années.  | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {Number} opts.controllingPersonType Type of relationship  | Value | Type | | --- | --- | | 0 | None (default) | | 1 | Shareholder | | 2 | Other_relationship | | 3 | Director | 
     * @param {Number} opts.employeeType Type of relationship. Possible values:  | Value | Type | | --- | --- | | 0 | None (default)| | 1 | Leader | | 2 | Employee | 
     * @param {String} opts.title User&#x27;s title. Possible values: * M * MME * MLLE 
     * @param {String} opts.firstname User&#x27;s first name
     * @param {String} opts.lastname User&#x27;s last name
     * @param {String} opts.middleNames User&#x27;s middle names
     * @param {String} opts.birthday User&#x27;s birth date. Format YYYY-MM-DD
     * @param {String} opts.email User&#x27;s email address (must be valid).
     * @param {String} opts.address1 User&#x27;s postal address (main)
     * @param {String} opts.address2 User&#x27;s postal address (complement)
     * @param {String} opts.address3 User&#x27;s postal address (complement2)
     * @param {String} opts.postcode User&#x27;s postcode
     * @param {String} opts.city User&#x27;s city
     * @param {String} opts.state User&#x27;s state
     * @param {String} opts.country User&#x27;s country (Format ISO 3166-1 alpha-2)
     * @param {String} opts.phone User&#x27;s phone number
     * @param {String} opts.mobile User&#x27;s mobile phone number
     * @param {String} opts.nationality User&#x27;s nationality
     * @param {String} opts.nationalityOther User&#x27;s other nationality
     * @param {String} opts.placeOfBirth User&#x27;s place of birth
     * @param {String} opts.birthCountry User&#x27;s country of birth (Format ISO 3166-1 alpha-2)
     * @param {String} opts.occupation User&#x27;s occupation
     * @param {module:model/String} opts.incomeRange Customer income range
     * @param {String} opts.legalName Business name
     * @param {String} opts.legalRegistrationNumber Business registration number
     * @param {String} opts.legalTvaNumber Business VAT number
     * @param {Date} opts.legalRegistrationDate Business registration date
     * @param {module:model/String} opts.legalForm | Code | Category | Details (in french) | | ---- | ----- | ---- | | 1000 | Individual company | Entrepreneur Individuel a Responsabilité Limitée (EIRL) | | 2110 | Indivision and others | Indivision entre personnes physiques | | 2120 | Indivision and others | Indivision avec personne morale | | 2210 | Indivision and others | Société créée de fait entre personnes physiques | | 2220 | Indivision and others | Société créée de fait avec personne morale | | 2310 | Indivision and others | Société en participation entre personnes physiques | | 2320 | Indivision and others | Société en participation avec personne morale | | 2385 | Indivision and others | Société en participation de professions libérales | | 2400 | Indivision and others | Fiducie | | 2700 | Diverse | Paroisse hors zone concordataire | | 2900 | Economic Interest Grouping | Autre groupement de droit privé non doté de la personnalité morale | | 3110 | Foreign company | Représentation ou agence commerciale d&#x27;état ou organisme public étranger  immatriculé au RCS | | 3120 | Foreign company | Société étrangère immatriculée au RCS | | 3205 | Foreign company | Organisation internationale | | 3210 | Foreign company | Etat collectivité ou établissement public étranger | | 3220 | Foreign company | Société étrangère non immatriculée au RCS | | 3290 | Foreign company | (Autre) personne morale de droit étranger | | 4110 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial doté d&#x27;un comptable public | | 4120 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial non doté d&#x27;un comptable public | | 4130 | Administrations, Instituions | Exploitant public | | 4140 | Administrations, Instituions | Etablissement public local à caractère industriel ou commercial | | 4150 | Administrations, Instituions | Régie d&#x27;une collectivité locale à caractère industriel ou commercial | | 4160 | Administrations, Instituions | Institution Banque de France | | 5191 | De facto undivided ownership company | Société de caution mutuelle | | 5192 | Diverse | Société coopérative de banque populaire | | 5193 | De facto undivided ownership company | Caisse de crédit maritime mutuel | | 5194 | De facto undivided ownership company | Caisse (fédérale) de crédit mutuel | | 5195 | Association fondation | Association coopérative inscrite (droit local Alsace Moselle) | | 5196 | De facto undivided ownership company | Caisse d&#x27;épargne et de prévoyance à forme coopérative | | 5202 | General partnership | Société en nom collectif | | 5203 | General partnership | Société en nom collectif coopérative | | 5306 | Limited company | Société en commandite simple | | 5307 | Limited company | Société en commandite simple coopérative | | 5308 | Limited company | Société en commandite par actions | | 5309 | Limited company | Société en commandite par actions coopérative | | 5385 | Limited company | Société d&#x27;exercice libéral en commandite par action | | 5410 | Limited Liability Company  | SARL nationale | | 5415 | Limited Liability Company  | SARL d&#x27;économie mixte | | 5422 | Limited Liability Company  | SARL immobilière pour le commerce et l&#x27;industrie (SICOMI) | | 5426 | Limited Liability Company  | Société immobilière de gestion | | 5430 | Limited Liability Company  | Safer en SARL | | 5431 | Limited Liability Company  | SARL mixte d&#x27;intérêt agricole (SIMA) | | 5432 | Limited Liability Company  | SARL d&#x27;intérêt collectif agricole (SICA) | | 5442 | Limited Liability Company  | SARL d&#x27;attribution | | 5443 | Limited Liability Company  | SARL coopérative de construction | | 5451 | Limited Liability Company  | SARL coopérative de consommation | | 5453 | Limited Liability Company  | SARL coopérative artisanale | | 5454 | Limited Liability Company  | SARL coopérative d&#x27;intérêt maritime | | 5455 | Limited Liability Company  | SARL coopérative de transports | | 5458 | Limited Liability Company  | SARL coopérative ouvrière de production et de crédit (SCOP) | | 5459 | Limited Liability Company  | SARL union de sociétés coopératives | | 5460 | Limited Liability Company  | SARL coopérative | | 5485 | Limited Liability Company  | Société d&#x27;exercice libéral à responsabilité limitée | | 5498 | Limited Liability Company  | SARL unipersonnelle | | 5499 | Limited Liability Company  | SARL | | 5505 | Limited company | SA à participation ouvrière à conseil d&#x27;administration | | 5510 | Limited company | SA nationale à conseil d&#x27;administration | | 5515 | Limited company | SA d&#x27;économie mixte à conseil d&#x27;administration | | 5520 | Limited company | Société d&#x27;investissement à capital variable (SICAV) à conseil d&#x27;administration | | 5522 | Limited company | Société anonyme immobilière pour le commerce et l&#x27;industrie (SICOMI)  à conseil d&#x27;administration | | 5525 | Limited company | Société anonyme immobilière d&#x27;investissement à conseil d&#x27;administration | | 5530 | Limited company | Safer anonyme à conseil d&#x27;administration | | 5531 | Limited company | Société anonyme mixte d&#x27;intérêt agricole (SMIA) à conseil d&#x27;administration | | 5532 | Limited company | Société anonyme mixte d&#x27;intérêt collectif agricole (SICA) à conseil d&#x27;administration | | 5542 | Limited company | Société anonyme d&#x27;attribution à conseil d&#x27;administration | | 5543 | Limited company | Société anonyme coopérative de construction à conseil d&#x27;administration | | 5546 | Limited company | SA de HLM à conseil d&#x27;administration | | 5547 | Limited company | SA coopérative de production de HLM à conseil d&#x27;administration | | 5548 | Limited company | SA de crédit immobilier à conseil d&#x27;administration | | 5551 | Limited company | SA coopérative de consommation à conseil d&#x27;administration | | 5552 | Limited company | SA coopérative de commerçants détaillants à conseil d&#x27;administration | | 5553 | Limited company | SA coopérative artisanale à conseil d&#x27;administration | | 5554 | Limited company | SA coopérative (d&#x27;intérêt) maritime à conseil d&#x27;administration | | 5555 | Limited company | SA coopérative de transports à conseil d&#x27;administration | | 5558 | Limited company | SCOP à conseil d&#x27;administration | | 5559 | Limited company | SA union de sociétés coopératives à conseil d&#x27;administration | | 5560 | Limited company | SA coopérative à conseil d&#x27;administration | | 5585 | Limited company | Société d&#x27;exercice libéral à forme anonyme à conseil d&#x27;administration | | 5599 | Limited company | SA à conseil d&#x27;administration | | 5605 | Limited company | SA à participation ouvrière à directoire | | 5610 | Limited company | SA nationale à directoire | | 5615 | Limited company | SA d&#x27;économie mixte à directoire | | 5620 | Limited company | SICAV | | 5622 | Limited company | SICOMI | | 5625 | Limited company | Société immobilière d&#x27;investissement anonyme à directoire | | 5630 | Limited company | Safer anonyme à directoire | | 5631 | Limited company | Société anonyme mixte d&#x27;intérêt agricole (SMIA) | | 5632 | Limited company | SICA | | 5642 | Limited company | Société anonyme d&#x27;attribution à directoire | | 5643 | Limited company | Société anonyme coopérative de construction à directoire | | 5646 | Limited company | S.A. HLM à directoire | | 5647 | Limited company | Société coopérative de production de HLM anonyme à directoire | | 5648 | Limited company | SA de crédit immobilier à directoire | | 5651 | Limited company | SA coopérative de consommation à directoire | | 5652 | Limited company | SA coopérative de commerçants détaillants à directoire | | 5653 | Limited company | SA coopérative artisanale à directoire | | 5654 | Limited company | SA coopérative (d&#x27;intérêt) maritime à directoire | | 5655 | Limited company | SA coopérative de transport à directoire | | 5658 | Limited company | SCOP | | 5659 | Limited company | SA union de sociétés coopératives à directoire | | 5660 | Limited company | SA coopérative à directoire | | 5685 | Limited company | Société d&#x27;exercice libéral à forme anonyme à directoire | | 5699 | Limited company | (Autre) SA à directoire | | 5710 | Limited company | SAS | | 5720 | Limited company | SASU | | 5785 | Limited company | Société d&#x27;exercice libéral par action simplifiée | | 5800 | Diverse | Société européenne | | 6100 | De facto undivided ownership company | Caisse d&#x27;épargne et de prévoyance | | 6210 | Economic Interest Grouping | GEIE | | 6220 | Economic Interest Grouping | GIE | | 6316 | Diverse | CUMA | | 6317 | Diverse | Société coopérative agricole | | 6318 | Diverse | Union de sociétés coopératives agricoles | | 6411 | De facto undivided ownership company | Société d&#x27;assurance mutuelle | | 6521 | Civils companies (without SCI) | SCPI | | 6532 | Civils companies (without SCI) | SICA | | 6533 | Civils companies (without SCI) | GAEC | | 6534 | Civils companies (without SCI) | Groupement foncier agricole | | 6535 | Civils companies (without SCI) | Groupement agricole foncier | | 6536 | Civils companies (without SCI) | Groupement forestier | | 6537 | Civils companies (without SCI) | Groupement pastoral | | 6538 | Civils companies (without SCI) | Groupement foncier rural | | 6539 | Civils companies (without SCI) | Société civile foncière | | 6540 | Civils companies | SCI | | 6541 | Civils companies | SCI de construction vente | | 6542 | Civils companies (without SCI) | Société civile d&#x27;attribution | | 6543 | Civils companies (without SCI) | Société civile coopérative de construction | | 6544 | Civils companies | Société civile d&#x27;accession progressive à la propriété | | 6551 | Civils companies (without SCI) | Société civile coopérative de consommation | | 6554 | Civils companies (without SCI) | Société civile coopérative (d&#x27;intérêt) maritime | | 6558 | Civils companies (without SCI) | Société civile coopérative entre médecins | | 6560 | Civils companies (without SCI) | SCP | | 6561 | Civils companies (without SCI) | SCP d&#x27;avocats | | 6562 | Civils companies (without SCI) | SCP d&#x27;avocats aux conseil | | 6563 | Civils companies (without SCI) | SCP d&#x27;avoués d&#x27;appel | | 6564 | Civils companies (without SCI) | SCP d&#x27;huissiers | | 6565 | Civils companies (without SCI) | SCP de notaires | | 6566 | Civils companies (without SCI) | SCP de commissaires-priseurs | | 6567 | Civils companies (without SCI) | SCP de greffiers de tribunal de commerce | | 6568 | Civils companies (without SCI) | SCP de conseils juridiques | | 6569 | Civils companies (without SCI) | SCP de commissaires aux comptes | | 6571 | Civils companies (without SCI) | SCP de médecins | | 6572 | Civils companies (without SCI) | SCP de dentistes | | 6573 | Civils companies (without SCI) | SCP d&#x27;infirmiers | | 6574 | Civils companies (without SCI) | SCP de masseurs kinésithérapeutes | | 6575 | Civils companies (without SCI) | SCP de directeurs de laboratoire d&#x27;analyse médicale | | 6576 | Civils companies (without SCI) | SCP de vétérinaires | | 6577 | Civils companies (without SCI) | SCP de géomètres-experts | | 6578 | Civils companies (without SCI) | SCP d&#x27;architectes | | 6585 | Civils companies (without SCI) | SCP | | 6588 | Civils companies (without SCI) | Société civile laitière | | 6589 | Civils companies (without SCI) | Société civile de moyens | | 6595 | Civils companies (without SCI) | Caisse (locale) de crédit mutuel | | 6596 | Civils companies (without SCI) | Caisse de crédit agricole mutuel | | 6597 | Civils companies (without SCI) | Société civile d&#x27;exploitation agricole | | 6598 | Farm operator  | Exploitation agricole à responsabilité limitée | | 6599 | Civils companies (without SCI) | Autre société civile | | 6901 | Diverse | Autres personnes de droit privé inscrites au registre du commerce et des sociétés | | 7111 | Administrations, Instituions | Autorité constitutionnelle | | 7112 | Administrations, Instituions | Autorité administrative indépendante | | 7113 | Administrations, Instituions | Ministère | | 7120 | Administrations, Instituions | Service central d&#x27;un ministère | | 7150 | Administrations, Instituions | Service du ministère de la Défense | | 7160 | Administrations, Instituions | Service déconcentré à compétence nation . D&#x27;un ministère (hors Défense) | | 7171 | Administrations, Instituions | Service déconcentré de l&#x27;Etat à compétence (inter) régionale | | 7172 | Administrations, Instituions | Service déconcentré de l&#x27;Etat à compétence (inter) départementale | | 7179 | Administrations, Instituions | (Autre) Service déconcentré de l&#x27;Etat à compétence territoriale | | 7190 | Administrations, Instituions | Ecole nationale non dotée de la personnalité morale | | 7210 | Administrations, Instituions | Commune | | 7220 | Administrations, Instituions | Département | | 7225 | Administrations, Instituions | Territoire d&#x27;Outre-Mer | | 7229 | Administrations, Instituions | (Autre) Collectivité territoriale | | 7230 | Administrations, Instituions | Région | | 7312 | Administrations, Instituions | Commune associée | | 7313 | Administrations, Instituions | Section de commune | | 7314 | Administrations, Instituions | Ensemble urbain | | 7321 | Administrations, Instituions | Association syndicale autorisée | | 7322 | Administrations, Instituions | Association foncière urbaine | | 7323 | Administrations, Instituions | Association foncière de remembrement | | 7331 | Administrations, Instituions | Etablissement public local d&#x27;enseignement | | 7340 | Administrations, Instituions | Pôle métropolitain | | 7341 | Administrations, Instituions | Secteur de commune | | 7342 | Administrations, Instituions | District urbain | | 7343 | Administrations, Instituions | Communauté urbaine | | 7344 | Administrations, Instituions | Métropole | | 7345 | Administrations, Instituions | Syndicat intercommunal à vocation multiple (SIVOM) | | 7346 | Administrations, Instituions | Communauté de commune | | 7347 | Administrations, Instituions | Communauté de villes | | 7348 | Administrations, Instituions | Communauté d&#x27;agglomération | | 7349 | Administrations, Instituions | Autre établissement public local de coopération non spécialisé ou entente | | 7351 | Administrations, Instituions | Institution interdépartementale ou entente | | 7352 | Administrations, Instituions | Institution interrégionale ou entente | | 7353 | Administrations, Instituions | Syndicat intercommunal à vocation unique (SIVU) | | 7354 | Administrations, Instituions | Syndicat mixte communal | | 7355 | Administrations, Instituions | Autre syndicat mixte | | 7356 | Administrations, Instituions | Commission syndicale pour la gestion des biens indivis des communes | | 7361 | Administrations, Instituions | Centre communal d&#x27;action sociale | | 7362 | Administrations, Instituions | Caisse des écoles | | 7363 | Administrations, Instituions | Caisse de crédit municipal | | 7364 | Administrations, Instituions | Etablissement d&#x27;hospitalisation | | 7365 | Administrations, Instituions | Syndicat inter hospitalier | | 7366 | Administrations, Instituions | Etablissement public local social et médico-social | | 7371 | Administrations, Instituions | Office public d&#x27;habitation à loyer modéré (OPHLM) | | 7372 | Administrations, Instituions | Service départemental d&#x27;incendie | | 7373 | Administrations, Instituions | Etablissement public local culturel | | 7378 | Administrations, Instituions | Régie d&#x27;une collectivité locale à caractère administratif | | 7379 | Administrations, Instituions | (Autre) Etablissement public administratif local | | 7381 | Administrations, Instituions | Organisme consulaire | | 7382 | Administrations, Instituions | Etablissement public national ayant fonction d&#x27;administration centrale | | 7383 | Administrations, Instituions | Etablissement public national à caractère scientifique  culturel et professionnel | | 7384 | Administrations, Instituions | Autre établissement public national d&#x27;enseignement | | 7385 | Administrations, Instituions | Autre établissement public national administratif à compétence territoriale limitée | | 7389 | Administrations, Instituions | Etablissement public national à caractère administratif | | 7410 | Administrations, Instituions | Groupement d&#x27;intérêt public (GIP) | | 7430 | Administrations, Instituions | Etablissement public des cultes d&#x27;Alsace-Lorraine | | 7450 | Administrations, Instituions | Etablissement public, cercle et foyer dans les armées | | 7470 | Administrations, Instituions | Groupement de coopération sanitaire à gestion publique | | 7490 | Administrations, Instituions | Autre personne morale de droit administratif | | 8110 | Administrations, Instituions | Régime général de la sécurité sociale | | 8120 | Administrations, Instituions | Régime spécial de sécurité sociale | | 8130 | Administrations, Instituions | Institution de retraite complémentaire | | 8140 | Administrations, Instituions | Mutualité sociale agricole | | 8150 | Administrations, Instituions | Régime maladie des non-salariés non agricoles | | 8160 | Administrations, Instituions | Régime vieillesse ne dépendant pas du régime général de la sécurité sociale | | 8170 | Administrations, Instituions | Régime d&#x27;assurance chômage | | 8190 | Administrations, Instituions | Autre régime de prévoyance sociale | | 8210 | De facto undivided ownership company | Mutuelle | | 8250 | De facto undivided ownership company | Assurance mutuelle agricole | | 8290 | De facto undivided ownership company | Autre organisme mutualiste | | 8310 | Association fondation | Comité central d&#x27;entreprise | | 8311 | Association fondation | Comité d&#x27;établissement | | 8410 | Association fondation | Syndicat de salariés | | 8420 | Association fondation | Syndicat patronal | | 8450 | Association fondation | Ordre professionnel ou assimilé | | 8470 | Association fondation | Centre technique industriel ou comité professionnel du développement économique | | 8490 | Association fondation | Autre organisme professionnel | | 8510 | Administrations, Instituions | Institution de prévoyance | | 8520 | Administrations, Instituions | Institution de retraite supplémentaire | | 9110 | Condominium syndicate | Syndicat de copropriété | | 9150 | Association fondation | Association syndicale libre | | 9210 | Association fondation | Association non déclarée | | 9220 | Association fondation | Association déclarée | | 9221 | Association fondation | Association déclarée \&quot;entreprises d&#x27;insertion par l&#x27;économique\&quot; | | 9222 | Association fondation | Association intermédiaire | | 9223 | Association fondation | Groupement d&#x27;employeurs | | 9224 | Association fondation | Association d&#x27;avocats à responsabilité professionnelle individuelle | | 9230 | Association fondation | Association déclarée  reconnue d&#x27;utilité publique | | 9240 | Association fondation | Congrégation | | 9260 | Association fondation | Association de droit local | | 9300 | Association fondation | Fondation | | 9900 | Diverse | Autre personne morale de droit privé | | 9970 | Diverse | Groupement de coopération sanitaire à gestion privée | 
     * @param {Number} opts.legalShareCapital Business share capital
     * @param {String} opts.legalSector Business sector. NAF code in France
     * @param {module:model/String} opts.legalAnnualTurnOver Business annual turnover (in k€)
     * @param {module:model/String} opts.legalNetIncomeRange Business net income range (in k€)
     * @param {module:model/String} opts.legalNumberOfEmployeeRange Business number of employees range
     * @param {Number} opts.effectiveBeneficiary Business effective beneficiary
     * @param {String} opts.language User&#x27;s prefered language (ISO 639-1)
     * @param {String} opts.taxNumber User&#x27;s tax identification number. If the taxResidence is not set to FR, the field is mandatory.
     * @param {String} opts.taxResidence User&#x27;s tax residence country code (2 char code following ISO 3166 norm).
     * @param {String} opts.position User&#x27;s position.
     * @param {module:model/String} opts.personalAssets User&#x27;s personal assets range exprimed in K€.
     * @param {module:model/Number} opts.activityOutsideEu Commercial activity outside of EU (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {module:model/Number} opts.economicSanctions Company, subsidiaries, entities, employees, directors, joint ventures are subject to Economic Sanctions (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {module:model/Number} opts.residentCountriesSanctions Company, subsidiaries, entities, employees, directors, joint ventures are subject to Economic Sanctions (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {module:model/Number} opts.involvedSanctions Company involved in countries or with people subject to Economic Sanctions after careful review (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {String} opts.timezone User&#x27;s timezone (Format tz database) The time zones have unique names in the form \&quot;Area/Location\&quot;, e.g. \&quot;America/New_York\&quot;, \&quot;Europe/Paris\&quot; More info [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). 
     * @param {module:api/UserApi~putUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putUser(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'userTag': opts['userTag'],'specifiedUSPerson': opts['specifiedUSPerson'],'controllingPersonType': opts['controllingPersonType'],'employeeType': opts['employeeType'],'title': opts['title'],'firstname': opts['firstname'],'lastname': opts['lastname'],'middleNames': opts['middleNames'],'birthday': opts['birthday'],'email': opts['email'],'address1': opts['address1'],'address2': opts['address2'],'address3': opts['address3'],'postcode': opts['postcode'],'city': opts['city'],'state': opts['state'],'country': opts['country'],'phone': opts['phone'],'mobile': opts['mobile'],'nationality': opts['nationality'],'nationalityOther': opts['nationalityOther'],'placeOfBirth': opts['placeOfBirth'],'birthCountry': opts['birthCountry'],'occupation': opts['occupation'],'incomeRange': opts['incomeRange'],'legalName': opts['legalName'],'legalRegistrationNumber': opts['legalRegistrationNumber'],'legalTvaNumber': opts['legalTvaNumber'],'legalRegistrationDate': opts['legalRegistrationDate'],'legalForm': opts['legalForm'],'legalShareCapital': opts['legalShareCapital'],'legalSector': opts['legalSector'],'legalAnnualTurnOver': opts['legalAnnualTurnOver'],'legalNetIncomeRange': opts['legalNetIncomeRange'],'legalNumberOfEmployeeRange': opts['legalNumberOfEmployeeRange'],'effectiveBeneficiary': opts['effectiveBeneficiary'],'language': opts['language'],'taxNumber': opts['taxNumber'],'taxResidence': opts['taxResidence'],'position': opts['position'],'personalAssets': opts['personalAssets'],'activityOutsideEu': opts['activityOutsideEu'],'economicSanctions': opts['economicSanctions'],'residentCountriesSanctions': opts['residentCountriesSanctions'],'involvedSanctions': opts['involvedSanctions'],'timezone': opts['timezone']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putUsers operation.
     * @callback moduleapi/UserApi~putUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create user
     * Create a new user in the system.
     * @param {module:model/Number} specifiedUSPerson Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des Etats-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux Etats-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux Etats-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet Etat américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux Etats-Unis ou résidant de façon permanente aux Etats-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années :  | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {String} email User&#x27;s email address (must be valid).
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:model/Number} opts.userTypeId User&#x27;s type. Possible values:  | Value | Type | | --- | --- | | 1 | Natural person (default)| | 2 | Business entity | | 3 | Non - governmental organization | | 4 | Governmental organization | 
     * @param {String} opts.userTag Custom data.
     * @param {Number} opts.parentUserId User id of user&#x27;s parent if any.
     * @param {module:model/String} opts.parentType Type of bound between parent and current user : * shareholder * employee * leader 
     * @param {module:model/Number} opts.controllingPersonType Type of relationship :  | Value | Type | | --- | --- | | 0 | None (default) | | 1 | Shareholder | | 2 | Other_relationship | | 3 | Director | 
     * @param {module:model/Number} opts.employeeType Type of user&#x27;s role :  | Value | Type | | --- | --- | | 0 | None (default)| | 1 | Leader | | 2 | Employee | 
     * @param {module:model/Number} opts.entityType Type of user&#x27;s entity type :    | Value | Type |   | --- | --- |   | 1 | Reporting Financial Institution |   | 2 | Non-Reporting Financial Institution |   | 3 | Active Non-Financial Entity - Governmental entities, Int. organizations |   | 4 | Active Non-Financial Entity - Other |   | 5 | Passive Non-Financial Entity - Investment entity that is not Participating Jurisdiction FI | 
     * @param {String} opts.title User&#x27;s title. Possible values: * M * MME * MLLE 
     * @param {String} opts.firstname User&#x27;s first name
     * @param {String} opts.lastname User&#x27;s last name
     * @param {String} opts.middleNames User&#x27;s middle names
     * @param {String} opts.birthday User&#x27;s birth date. Format YYYY-MM-DD
     * @param {String} opts.address1 User&#x27;s postal address (main). Can not contain carriage return.
     * @param {String} opts.address2 User&#x27;s postal address (complement). Can not contain carriage return.
     * @param {String} opts.address3 User&#x27;s postal address (complement2). Can not contain carriage return.
     * @param {String} opts.postcode User&#x27;s postcode
     * @param {String} opts.city User&#x27;s city
     * @param {String} opts.state User&#x27;s state
     * @param {String} opts.country User&#x27;s country (Format ISO 3166-1 alpha-2)
     * @param {String} opts.phone User&#x27;s phone number (Format E.164). If you use Url please replace + with %2B.
     * @param {String} opts.mobile User&#x27;s mobile phone number (Format E.164). If you use Url please replace + with %2B.
     * @param {String} opts.nationality User&#x27;s nationality
     * @param {String} opts.nationalityOther User&#x27;s other nationality
     * @param {String} opts.placeOfBirth User&#x27;s place of birth
     * @param {String} opts.birthCountry User&#x27;s country of birth (Format ISO 3166-1 alpha-2)
     * @param {String} opts.occupation User&#x27;s occupation
     * @param {module:model/String} opts.incomeRange Customer income range
     * @param {String} opts.legalName Business name
     * @param {String} opts.legalRegistrationNumber Business registration number
     * @param {String} opts.legalTvaNumber Business VAT number
     * @param {Date} opts.legalRegistrationDate Business registration date
     * @param {module:model/String} opts.legalForm | Code | Category | Details (in french) | | ---- | ----- | ---- | | 1000 | Individual company | Entrepreneur Individuel a Responsabilité Limitée (EIRL) | | 2110 | Indivision and others | Indivision entre personnes physiques | | 2120 | Indivision and others | Indivision avec personne morale | | 2210 | Indivision and others | Société créée de fait entre personnes physiques | | 2220 | Indivision and others | Société créée de fait avec personne morale | | 2310 | Indivision and others | Société en participation entre personnes physiques | | 2320 | Indivision and others | Société en participation avec personne morale | | 2385 | Indivision and others | Société en participation de professions libérales | | 2400 | Indivision and others | Fiducie | | 2700 | Diverse | Paroisse hors zone concordataire | | 2900 | Economic Interest Grouping | Autre groupement de droit privé non doté de la personnalité morale | | 3110 | Foreign company | Représentation ou agence commerciale d&#x27;état ou organisme public étranger  immatriculé au RCS | | 3120 | Foreign company | Société étrangère immatriculée au RCS | | 3205 | Foreign company | Organisation internationale | | 3210 | Foreign company | Etat collectivité ou établissement public étranger | | 3220 | Foreign company | Société étrangère non immatriculée au RCS | | 3290 | Foreign company | (Autre) personne morale de droit étranger | | 4110 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial doté d&#x27;un comptable public | | 4120 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial non doté d&#x27;un comptable public | | 4130 | Administrations, Instituions | Exploitant public | | 4140 | Administrations, Instituions | Etablissement public local à caractère industriel ou commercial | | 4150 | Administrations, Instituions | Régie d&#x27;une collectivité locale à caractère industriel ou commercial | | 4160 | Administrations, Instituions | Institution Banque de France | | 5191 | De facto undivided ownership company | Société de caution mutuelle | | 5192 | Diverse | Société coopérative de banque populaire | | 5193 | De facto undivided ownership company | Caisse de crédit maritime mutuel | | 5194 | De facto undivided ownership company | Caisse (fédérale) de crédit mutuel | | 5195 | Association fondation | Association coopérative inscrite (droit local Alsace Moselle) | | 5196 | De facto undivided ownership company | Caisse d&#x27;épargne et de prévoyance à forme coopérative | | 5202 | General partnership | Société en nom collectif | | 5203 | General partnership | Société en nom collectif coopérative | | 5306 | Limited company | Société en commandite simple | | 5307 | Limited company | Société en commandite simple coopérative | | 5308 | Limited company | Société en commandite par actions | | 5309 | Limited company | Société en commandite par actions coopérative | | 5385 | Limited company | Société d&#x27;exercice libéral en commandite par action | | 5410 | Limited Liability Company  | SARL nationale | | 5415 | Limited Liability Company  | SARL d&#x27;économie mixte | | 5422 | Limited Liability Company  | SARL immobilière pour le commerce et l&#x27;industrie (SICOMI) | | 5426 | Limited Liability Company  | Société immobilière de gestion | | 5430 | Limited Liability Company  | Safer en SARL | | 5431 | Limited Liability Company  | SARL mixte d&#x27;intérêt agricole (SIMA) | | 5432 | Limited Liability Company  | SARL d&#x27;intérêt collectif agricole (SICA) | | 5442 | Limited Liability Company  | SARL d&#x27;attribution | | 5443 | Limited Liability Company  | SARL coopérative de construction | | 5451 | Limited Liability Company  | SARL coopérative de consommation | | 5453 | Limited Liability Company  | SARL coopérative artisanale | | 5454 | Limited Liability Company  | SARL coopérative d&#x27;intérêt maritime | | 5455 | Limited Liability Company  | SARL coopérative de transports | | 5458 | Limited Liability Company  | SARL coopérative ouvrière de production et de crédit (SCOP) | | 5459 | Limited Liability Company  | SARL union de sociétés coopératives | | 5460 | Limited Liability Company  | SARL coopérative | | 5485 | Limited Liability Company  | Société d&#x27;exercice libéral à responsabilité limitée | | 5498 | Limited Liability Company  | SARL unipersonnelle | | 5499 | Limited Liability Company  | SARL | | 5505 | Limited company | SA à participation ouvrière à conseil d&#x27;administration | | 5510 | Limited company | SA nationale à conseil d&#x27;administration | | 5515 | Limited company | SA d&#x27;économie mixte à conseil d&#x27;administration | | 5520 | Limited company | Société d&#x27;investissement à capital variable (SICAV) à conseil d&#x27;administration | | 5522 | Limited company | Société anonyme immobilière pour le commerce et l&#x27;industrie (SICOMI)  à conseil d&#x27;administration | | 5525 | Limited company | Société anonyme immobilière d&#x27;investissement à conseil d&#x27;administration | | 5530 | Limited company | Safer anonyme à conseil d&#x27;administration | | 5531 | Limited company | Société anonyme mixte d&#x27;intérêt agricole (SMIA) à conseil d&#x27;administration | | 5532 | Limited company | Société anonyme mixte d&#x27;intérêt collectif agricole (SICA) à conseil d&#x27;administration | | 5542 | Limited company | Société anonyme d&#x27;attribution à conseil d&#x27;administration | | 5543 | Limited company | Société anonyme coopérative de construction à conseil d&#x27;administration | | 5546 | Limited company | SA de HLM à conseil d&#x27;administration | | 5547 | Limited company | SA coopérative de production de HLM à conseil d&#x27;administration | | 5548 | Limited company | SA de crédit immobilier à conseil d&#x27;administration | | 5551 | Limited company | SA coopérative de consommation à conseil d&#x27;administration | | 5552 | Limited company | SA coopérative de commerçants détaillants à conseil d&#x27;administration | | 5553 | Limited company | SA coopérative artisanale à conseil d&#x27;administration | | 5554 | Limited company | SA coopérative (d&#x27;intérêt) maritime à conseil d&#x27;administration | | 5555 | Limited company | SA coopérative de transports à conseil d&#x27;administration | | 5558 | Limited company | SCOP à conseil d&#x27;administration | | 5559 | Limited company | SA union de sociétés coopératives à conseil d&#x27;administration | | 5560 | Limited company | SA coopérative à conseil d&#x27;administration | | 5585 | Limited company | Société d&#x27;exercice libéral à forme anonyme à conseil d&#x27;administration | | 5599 | Limited company | SA à conseil d&#x27;administration | | 5605 | Limited company | SA à participation ouvrière à directoire | | 5610 | Limited company | SA nationale à directoire | | 5615 | Limited company | SA d&#x27;économie mixte à directoire | | 5620 | Limited company | SICAV | | 5622 | Limited company | SICOMI | | 5625 | Limited company | Société immobilière d&#x27;investissement anonyme à directoire | | 5630 | Limited company | Safer anonyme à directoire | | 5631 | Limited company | Société anonyme mixte d&#x27;intérêt agricole (SMIA) | | 5632 | Limited company | SICA | | 5642 | Limited company | Société anonyme d&#x27;attribution à directoire | | 5643 | Limited company | Société anonyme coopérative de construction à directoire | | 5646 | Limited company | S.A. HLM à directoire | | 5647 | Limited company | Société coopérative de production de HLM anonyme à directoire | | 5648 | Limited company | SA de crédit immobilier à directoire | | 5651 | Limited company | SA coopérative de consommation à directoire | | 5652 | Limited company | SA coopérative de commerçants détaillants à directoire | | 5653 | Limited company | SA coopérative artisanale à directoire | | 5654 | Limited company | SA coopérative (d&#x27;intérêt) maritime à directoire | | 5655 | Limited company | SA coopérative de transport à directoire | | 5658 | Limited company | SCOP | | 5659 | Limited company | SA union de sociétés coopératives à directoire | | 5660 | Limited company | SA coopérative à directoire | | 5685 | Limited company | Société d&#x27;exercice libéral à forme anonyme à directoire | | 5699 | Limited company | (Autre) SA à directoire | | 5710 | Limited company | SAS | | 5720 | Limited company | SASU | | 5785 | Limited company | Société d&#x27;exercice libéral par action simplifiée | | 5800 | Diverse | Société européenne | | 6100 | De facto undivided ownership company | Caisse d&#x27;épargne et de prévoyance | | 6210 | Economic Interest Grouping | GEIE | | 6220 | Economic Interest Grouping | GIE | | 6316 | Diverse | CUMA | | 6317 | Diverse | Société coopérative agricole | | 6318 | Diverse | Union de sociétés coopératives agricoles | | 6411 | De facto undivided ownership company | Société d&#x27;assurance mutuelle | | 6521 | Civils companies (without SCI) | SCPI | | 6532 | Civils companies (without SCI) | SICA | | 6533 | Civils companies (without SCI) | GAEC | | 6534 | Civils companies (without SCI) | Groupement foncier agricole | | 6535 | Civils companies (without SCI) | Groupement agricole foncier | | 6536 | Civils companies (without SCI) | Groupement forestier | | 6537 | Civils companies (without SCI) | Groupement pastoral | | 6538 | Civils companies (without SCI) | Groupement foncier rural | | 6539 | Civils companies (without SCI) | Société civile foncière | | 6540 | Civils companies | SCI | | 6541 | Civils companies | SCI de construction vente | | 6542 | Civils companies (without SCI) | Société civile d&#x27;attribution | | 6543 | Civils companies (without SCI) | Société civile coopérative de construction | | 6544 | Civils companies | Société civile d&#x27;accession progressive à la propriété | | 6551 | Civils companies (without SCI) | Société civile coopérative de consommation | | 6554 | Civils companies (without SCI) | Société civile coopérative (d&#x27;intérêt) maritime | | 6558 | Civils companies (without SCI) | Société civile coopérative entre médecins | | 6560 | Civils companies (without SCI) | SCP | | 6561 | Civils companies (without SCI) | SCP d&#x27;avocats | | 6562 | Civils companies (without SCI) | SCP d&#x27;avocats aux conseil | | 6563 | Civils companies (without SCI) | SCP d&#x27;avoués d&#x27;appel | | 6564 | Civils companies (without SCI) | SCP d&#x27;huissiers | | 6565 | Civils companies (without SCI) | SCP de notaires | | 6566 | Civils companies (without SCI) | SCP de commissaires-priseurs | | 6567 | Civils companies (without SCI) | SCP de greffiers de tribunal de commerce | | 6568 | Civils companies (without SCI) | SCP de conseils juridiques | | 6569 | Civils companies (without SCI) | SCP de commissaires aux comptes | | 6571 | Civils companies (without SCI) | SCP de médecins | | 6572 | Civils companies (without SCI) | SCP de dentistes | | 6573 | Civils companies (without SCI) | SCP d&#x27;infirmiers | | 6574 | Civils companies (without SCI) | SCP de masseurs kinésithérapeutes | | 6575 | Civils companies (without SCI) | SCP de directeurs de laboratoire d&#x27;analyse médicale | | 6576 | Civils companies (without SCI) | SCP de vétérinaires | | 6577 | Civils companies (without SCI) | SCP de géomètres-experts | | 6578 | Civils companies (without SCI) | SCP d&#x27;architectes | | 6585 | Civils companies (without SCI) | SCP | | 6588 | Civils companies (without SCI) | Société civile laitière | | 6589 | Civils companies (without SCI) | Société civile de moyens | | 6595 | Civils companies (without SCI) | Caisse (locale) de crédit mutuel | | 6596 | Civils companies (without SCI) | Caisse de crédit agricole mutuel | | 6597 | Civils companies (without SCI) | Société civile d&#x27;exploitation agricole | | 6598 | Farm operator  | Exploitation agricole à responsabilité limitée | | 6599 | Civils companies (without SCI) | Autre société civile | | 6901 | Diverse | Autres personnes de droit privé inscrites au registre du commerce et des sociétés | | 7111 | Administrations, Instituions | Autorité constitutionnelle | | 7112 | Administrations, Instituions | Autorité administrative indépendante | | 7113 | Administrations, Instituions | Ministère | | 7120 | Administrations, Instituions | Service central d&#x27;un ministère | | 7150 | Administrations, Instituions | Service du ministère de la Défense | | 7160 | Administrations, Instituions | Service déconcentré à compétence nation . D&#x27;un ministère (hors Défense) | | 7171 | Administrations, Instituions | Service déconcentré de l&#x27;Etat à compétence (inter) régionale | | 7172 | Administrations, Instituions | Service déconcentré de l&#x27;Etat à compétence (inter) départementale | | 7179 | Administrations, Instituions | (Autre) Service déconcentré de l&#x27;Etat à compétence territoriale | | 7190 | Administrations, Instituions | Ecole nationale non dotée de la personnalité morale | | 7210 | Administrations, Instituions | Commune | | 7220 | Administrations, Instituions | Département | | 7225 | Administrations, Instituions | Territoire d&#x27;Outre-Mer | | 7229 | Administrations, Instituions | (Autre) Collectivité territoriale | | 7230 | Administrations, Instituions | Région | | 7312 | Administrations, Instituions | Commune associée | | 7313 | Administrations, Instituions | Section de commune | | 7314 | Administrations, Instituions | Ensemble urbain | | 7321 | Administrations, Instituions | Association syndicale autorisée | | 7322 | Administrations, Instituions | Association foncière urbaine | | 7323 | Administrations, Instituions | Association foncière de remembrement | | 7331 | Administrations, Instituions | Etablissement public local d&#x27;enseignement | | 7340 | Administrations, Instituions | Pôle métropolitain | | 7341 | Administrations, Instituions | Secteur de commune | | 7342 | Administrations, Instituions | District urbain | | 7343 | Administrations, Instituions | Communauté urbaine | | 7344 | Administrations, Instituions | Métropole | | 7345 | Administrations, Instituions | Syndicat intercommunal à vocation multiple (SIVOM) | | 7346 | Administrations, Instituions | Communauté de commune | | 7347 | Administrations, Instituions | Communauté de villes | | 7348 | Administrations, Instituions | Communauté d&#x27;agglomération | | 7349 | Administrations, Instituions | Autre établissement public local de coopération non spécialisé ou entente | | 7351 | Administrations, Instituions | Institution interdépartementale ou entente | | 7352 | Administrations, Instituions | Institution interrégionale ou entente | | 7353 | Administrations, Instituions | Syndicat intercommunal à vocation unique (SIVU) | | 7354 | Administrations, Instituions | Syndicat mixte communal | | 7355 | Administrations, Instituions | Autre syndicat mixte | | 7356 | Administrations, Instituions | Commission syndicale pour la gestion des biens indivis des communes | | 7361 | Administrations, Instituions | Centre communal d&#x27;action sociale | | 7362 | Administrations, Instituions | Caisse des écoles | | 7363 | Administrations, Instituions | Caisse de crédit municipal | | 7364 | Administrations, Instituions | Etablissement d&#x27;hospitalisation | | 7365 | Administrations, Instituions | Syndicat inter hospitalier | | 7366 | Administrations, Instituions | Etablissement public local social et médico-social | | 7371 | Administrations, Instituions | Office public d&#x27;habitation à loyer modéré (OPHLM) | | 7372 | Administrations, Instituions | Service départemental d&#x27;incendie | | 7373 | Administrations, Instituions | Etablissement public local culturel | | 7378 | Administrations, Instituions | Régie d&#x27;une collectivité locale à caractère administratif | | 7379 | Administrations, Instituions | (Autre) Etablissement public administratif local | | 7381 | Administrations, Instituions | Organisme consulaire | | 7382 | Administrations, Instituions | Etablissement public national ayant fonction d&#x27;administration centrale | | 7383 | Administrations, Instituions | Etablissement public national à caractère scientifique  culturel et professionnel | | 7384 | Administrations, Instituions | Autre établissement public national d&#x27;enseignement | | 7385 | Administrations, Instituions | Autre établissement public national administratif à compétence territoriale limitée | | 7389 | Administrations, Instituions | Etablissement public national à caractère administratif | | 7410 | Administrations, Instituions | Groupement d&#x27;intérêt public (GIP) | | 7430 | Administrations, Instituions | Etablissement public des cultes d&#x27;Alsace-Lorraine | | 7450 | Administrations, Instituions | Etablissement public, cercle et foyer dans les armées | | 7470 | Administrations, Instituions | Groupement de coopération sanitaire à gestion publique | | 7490 | Administrations, Instituions | Autre personne morale de droit administratif | | 8110 | Administrations, Instituions | Régime général de la sécurité sociale | | 8120 | Administrations, Instituions | Régime spécial de sécurité sociale | | 8130 | Administrations, Instituions | Institution de retraite complémentaire | | 8140 | Administrations, Instituions | Mutualité sociale agricole | | 8150 | Administrations, Instituions | Régime maladie des non-salariés non agricoles | | 8160 | Administrations, Instituions | Régime vieillesse ne dépendant pas du régime général de la sécurité sociale | | 8170 | Administrations, Instituions | Régime d&#x27;assurance chômage | | 8190 | Administrations, Instituions | Autre régime de prévoyance sociale | | 8210 | De facto undivided ownership company | Mutuelle | | 8250 | De facto undivided ownership company | Assurance mutuelle agricole | | 8290 | De facto undivided ownership company | Autre organisme mutualiste | | 8310 | Association fondation | Comité central d&#x27;entreprise | | 8311 | Association fondation | Comité d&#x27;établissement | | 8410 | Association fondation | Syndicat de salariés | | 8420 | Association fondation | Syndicat patronal | | 8450 | Association fondation | Ordre professionnel ou assimilé | | 8470 | Association fondation | Centre technique industriel ou comité professionnel du développement économique | | 8490 | Association fondation | Autre organisme professionnel | | 8510 | Administrations, Instituions | Institution de prévoyance | | 8520 | Administrations, Instituions | Institution de retraite supplémentaire | | 9110 | Condominium syndicate | Syndicat de copropriété | | 9150 | Association fondation | Association syndicale libre | | 9210 | Association fondation | Association non déclarée | | 9220 | Association fondation | Association déclarée | | 9221 | Association fondation | Association déclarée \&quot;entreprises d&#x27;insertion par l&#x27;économique\&quot; | | 9222 | Association fondation | Association intermédiaire | | 9223 | Association fondation | Groupement d&#x27;employeurs | | 9224 | Association fondation | Association d&#x27;avocats à responsabilité professionnelle individuelle | | 9230 | Association fondation | Association déclarée  reconnue d&#x27;utilité publique | | 9240 | Association fondation | Congrégation | | 9260 | Association fondation | Association de droit local | | 9300 | Association fondation | Fondation | | 9900 | Diverse | Autre personne morale de droit privé | | 9970 | Diverse | Groupement de coopération sanitaire à gestion privée | 
     * @param {Number} opts.legalShareCapital Business share capital
     * @param {String} opts.legalSector Business sector. NAF code in France
     * @param {module:model/String} opts.legalAnnualTurnOver Business annual turnover (in k€)
     * @param {module:model/String} opts.legalNetIncomeRange Business net income range (in k€)
     * @param {module:model/String} opts.legalNumberOfEmployeeRange Business number of employees range
     * @param {Number} opts.effectiveBeneficiary Business effective beneficiary
     * @param {String} opts.language User&#x27;s prefered language (ISO 639-1)
     * @param {String} opts.taxNumber User&#x27;s tax identification number. If the taxResidence is set to another country than France, the field is mandatory. (deprecated, you must use the TaxResidence endpoint) 
     * @param {String} opts.taxResidence User&#x27;s tax residence country code (2 char code following ISO 3166 norm). (deprecated, you must use the TaxResidence endpoint) 
     * @param {String} opts.position User&#x27;s position.
     * @param {module:model/String} opts.personalAssets User&#x27;s personal assets range exprimed in K€.
     * @param {module:model/Number} opts.activityOutsideEu Commercial activity outside of EU (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {module:model/Number} opts.economicSanctions Company, subsidiaries, entities, employees, directors, joint ventures are subject to Economic Sanctions (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {module:model/Number} opts.residentCountriesSanctions Company, subsidiaries, entities, employees, directors, joint ventures are subject to Economic Sanctions (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {module:model/Number} opts.involvedSanctions Company involved in countries or with people subject to Economic Sanctions after careful review (only for Professionals) | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
     * @param {String} opts.timezone User&#x27;s timezone (Format tz database) The time zones have unique names in the form \&quot;Area/Location\&quot;, e.g. \&quot;America/New_York\&quot;, \&quot;Europe/Paris\&quot; More info [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). 
     * @param {module:api/UserApi~putUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putUsers(specifiedUSPerson, email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'specifiedUSPerson' is set
      if (specifiedUSPerson === undefined || specifiedUSPerson === null) {
        throw new Error("Missing the required parameter 'specifiedUSPerson' when calling putUsers");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling putUsers");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'userTypeId': opts['userTypeId'],'userTag': opts['userTag'],'parentUserId': opts['parentUserId'],'parentType': opts['parentType'],'specifiedUSPerson': specifiedUSPerson,'controllingPersonType': opts['controllingPersonType'],'employeeType': opts['employeeType'],'entityType': opts['entityType'],'title': opts['title'],'firstname': opts['firstname'],'lastname': opts['lastname'],'middleNames': opts['middleNames'],'birthday': opts['birthday'],'email': email,'address1': opts['address1'],'address2': opts['address2'],'address3': opts['address3'],'postcode': opts['postcode'],'city': opts['city'],'state': opts['state'],'country': opts['country'],'phone': opts['phone'],'mobile': opts['mobile'],'nationality': opts['nationality'],'nationalityOther': opts['nationalityOther'],'placeOfBirth': opts['placeOfBirth'],'birthCountry': opts['birthCountry'],'occupation': opts['occupation'],'incomeRange': opts['incomeRange'],'legalName': opts['legalName'],'legalRegistrationNumber': opts['legalRegistrationNumber'],'legalTvaNumber': opts['legalTvaNumber'],'legalRegistrationDate': opts['legalRegistrationDate'],'legalForm': opts['legalForm'],'legalShareCapital': opts['legalShareCapital'],'legalSector': opts['legalSector'],'legalAnnualTurnOver': opts['legalAnnualTurnOver'],'legalNetIncomeRange': opts['legalNetIncomeRange'],'legalNumberOfEmployeeRange': opts['legalNumberOfEmployeeRange'],'effectiveBeneficiary': opts['effectiveBeneficiary'],'language': opts['language'],'taxNumber': opts['taxNumber'],'taxResidence': opts['taxResidence'],'position': opts['position'],'personalAssets': opts['personalAssets'],'activityOutsideEu': opts['activityOutsideEu'],'economicSanctions': opts['economicSanctions'],'residentCountriesSanctions': opts['residentCountriesSanctions'],'involvedSanctions': opts['involvedSanctions'],'timezone': opts['timezone']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersIdKyclivenessPost operation.
     * @callback moduleapi/UserApi~usersIdKyclivenessPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST KYC Liveness.
     * @param {Number} userId The user ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.body URL user will be redirect to after process that will override default configured value.
     * @param {module:api/UserApi~usersIdKyclivenessPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersIdKyclivenessPost(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersIdKyclivenessPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['*/*'];
      let accepts = ['*/*', 'application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/users/{id}/kycliveness', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersIdKyclivenessPut operation.
     * @callback moduleapi/UserApi~usersIdKyclivenessPutCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT KYC Liveness.
     * @param {Number} userId The user ID
     * @param {module:api/UserApi~usersIdKyclivenessPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersIdKyclivenessPut(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersIdKyclivenessPut");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/users/{id}/kycliveness', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersIdKycreviewPut operation.
     * @callback moduleapi/UserApi~usersIdKycreviewPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * review user information
     * Perform a KYC review for given user.
     * @param {Number} id User&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken Access token must be defined here or in Authorization HTTP header. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/UserApi~usersIdKycreviewPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersIdKycreviewPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdKycreviewPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessToken': opts['accessToken'],'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/users/{id}/Kycreview/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20028} from '../model/InlineResponse20028';
import {InlineResponseDefault} from '../model/InlineResponseDefault';

/**
* Virtualibans service.
* @module api/VirtualibansApi
* @version 0.1.1
*/
export class VirtualibansApi {

    /**
    * Constructs a new VirtualibansApi. 
    * @alias module:api/VirtualibansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getvirtualiban operation.
     * @callback moduleapi/VirtualibansApi~getvirtualibanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a virtualiban by Id
     * Get a virtualiban from the system by its id.
     * @param {Number} id VirtualIban&#x27;s id.
     * @param {module:api/VirtualibansApi~getvirtualibanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getvirtualiban(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getvirtualiban");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/virtualibans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getvirtualibans operation.
     * @callback moduleapi/VirtualibansApi~getvirtualibansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search virtualibans
     * Get virtualiban that match search criteria.
     * @param {Date} validFrom The beginning date of validity.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserIP Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.virtualIbanId VirtualIban&#x27;s id.
     * @param {Number} opts.walletId VirtualIban&#x27;s wallet id.
     * @param {Number} opts.typeId VirtualIban&#x27;s type id.
     * @param {Number} opts.tag A tag generated by the client
     * @param {String} opts.reference The client&#x27;s internal reference of the vitual IBAN.
     * @param {Date} opts.validTo The limit date of validity.
     * @param {String} opts.maxUsage The maximum number of usage authorized.
     * @param {Number} opts.maxAmount The maximum amount authorized.
     * @param {Date} opts.createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Number} opts.pageNumber Pagination page number. More info [here](https://agent.treezor.com/lists). 
     * @param {Number} opts.pageCount The number of items per page. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortBy The transaction element you want to sort the list with. Default value : createdDate. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
     * @param {module:api/VirtualibansApi~getvirtualibansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getvirtualibans(validFrom, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'validFrom' is set
      if (validFrom === undefined || validFrom === null) {
        throw new Error("Missing the required parameter 'validFrom' when calling getvirtualibans");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIP': opts['accessUserIP'],'virtualIbanId': opts['virtualIbanId'],'walletId': opts['walletId'],'typeId': opts['typeId'],'tag': opts['tag'],'reference': opts['reference'],'validFrom': validFrom,'validTo': opts['validTo'],'maxUsage': opts['maxUsage'],'maxAmount': opts['maxAmount'],'createdDateFrom': opts['createdDateFrom'],'createdDateTo': opts['createdDateTo'],'updatedDateFrom': opts['updatedDateFrom'],'updatedDateTo': opts['updatedDateTo'],'pageNumber': opts['pageNumber'],'pageCount': opts['pageCount'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/virtualibans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postVirtualIban operation.
     * @callback moduleapi/VirtualibansApi~postVirtualIbanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a virtual IBAN
     * Create a new virtual IBAN in in the system.
     * @param {Number} walletId The Id Of the Wallet. The Wallet must be in validated status. The wallet must be of type \&quot;payment\&quot; or \&quot;electronic money\&quot;
     * @param {Number} typeId | Type Id | Virtual IBAN Type| | ---| --- | | 1 | DEBIT | | 2 | CREDIT | 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.tag A tag generated by the client
     * @param {String} opts.reference The client&#x27;s internal reference of the vitual IBAN. Less than 255 characters.
     * @param {Date} opts.validFrom The beginning date of validity. The beginning date must not be less than today&#x27;s date. Both date formats are accepted &#x27;YYYY-MM-DD HH:MM:SS&#x27; or &#x27;YYYY-MM-DD&#x27;
     * @param {Date} opts.validTo The limit date of validity. Cannot be less or equal to the validFrom date. Both date formats are accepted &#x27;YYYY-MM-DD HH:MM:SS&#x27; or &#x27;YYYY-MM-DD&#x27;
     * @param {Number} opts.maxUsage The maximum number of usage authorized. If you want to set no maximum usage limitation you can omit the parameter or set it to null. If you want to limit usage please send an integer in that field. This integer cannot be less than 1.
     * @param {Number} opts.maxAmount The maximum amount authorized.If you want to set no maximum usage amount limitation you can omit the parameter or set it to null. If you want to limit the amount please send a DECIMAL (with a point as separator) in that field. This decimal cannot be less than 0.00.
     * @param {module:api/VirtualibansApi~postVirtualIbanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postVirtualIban(walletId, typeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling postVirtualIban");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling postVirtualIban");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'walletId': walletId,'typeId': typeId,'tag': opts['tag'],'reference': opts['reference'],'validFrom': opts['validFrom'],'validTo': opts['validTo'],'maxUsage': opts['maxUsage'],'maxAmount': opts['maxAmount']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/virtualibans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putVirtualIban operation.
     * @callback moduleapi/VirtualibansApi~putVirtualIbanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a Virtual IBAN
     * Update Virtual IBAN&#x27;s information.
     * @param {Number} id VirtualIban&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.reference The client&#x27;s internal reference of the vitual IBAN.
     * @param {Date} opts.validFrom The beginning date of validity. Date of validity can be changed. It must follow the rules explained in the POST endpoint. Both date formats are accepted &#x27;YYYY-MM-DD HH:MM:SS&#x27; or &#x27;YYYY-MM-DD&#x27;
     * @param {Date} opts.validTo The limit date of validity. It must follow the rules of creation. It must follow the rules explained in the POST endpoint.
     * @param {Number} opts.maxUsage The maximum number of usage authorized. It must follow the rules explained in the POST endpoint AND the maximum usage cannot be strictly less than the transaction counter of the Virtual Iban.
     * @param {Number} opts.maxAmount The maximum amount authorized. It must follow the rules explained in the POST endpoint AND the maximum amount cannot be strictly less than the cumulated amount of this Virtual Iban.
     * @param {module:api/VirtualibansApi~putVirtualIbanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putVirtualIban(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putVirtualIban");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'reference': opts['reference'],'validFrom': opts['validFrom'],'validTo': opts['validTo'],'maxUsage': opts['maxUsage'],'maxAmount': opts['maxAmount']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/virtualibans/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20022} from '../model/InlineResponse20022';
import {InlineResponseDefault} from '../model/InlineResponseDefault';

/**
* TaxResidence service.
* @module api/TaxResidenceApi
* @version 0.1.1
*/
export class TaxResidenceApi {

    /**
    * Constructs a new TaxResidenceApi. 
    * @alias module:api/TaxResidenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the taxResidencesGet operation.
     * @callback moduleapi/TaxResidenceApi~taxResidencesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search a residence
     * Search a residence that match search criteria
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will  contact you if so. More info  [here](https://agent.treezor.com/security-authentication).
     * @param {Number} opts.id id of the residence
     * @param {Number} opts.userId User&#x27;s id residence
     * @param {module:api/TaxResidenceApi~taxResidencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    taxResidencesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'id': opts['id'],'userId': opts['userId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/taxResidences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the taxResidencesIdDelete operation.
     * @callback moduleapi/TaxResidenceApi~taxResidencesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a residence
     * Delete a residence that match id
     * @param {Number} id id of the residence
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will  contact you if so. More info  [here](https://agent.treezor.com/security-authentication).
     * @param {module:api/TaxResidenceApi~taxResidencesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    taxResidencesIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling taxResidencesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/taxResidences/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the taxResidencesIdGet operation.
     * @callback moduleapi/TaxResidenceApi~taxResidencesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the informations of a residence
     * Read the informations of a residence that match with id
     * @param {Number} id id of the residence
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will  contact you if so. More info  [here](https://agent.treezor.com/security-authentication).
     * @param {module:api/TaxResidenceApi~taxResidencesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    taxResidencesIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling taxResidencesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/taxResidences/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the taxResidencesIdPut operation.
     * @callback moduleapi/TaxResidenceApi~taxResidencesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update the residence
     * Update a residence already created.
     * @param {Number} id residence id
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will  contact you if so. More info  [here](https://agent.treezor.com/security-authentication).
     * @param {Number} opts.userId User&#x27;s id residence
     * @param {String} opts.country country of the resident
     * @param {String} opts.taxPayerId Tax payer&#x27;s id
     * @param {Boolean} opts.liabilityWaiver Tax declaration
     * @param {module:api/TaxResidenceApi~taxResidencesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    taxResidencesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling taxResidencesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'userId': opts['userId'],'country': opts['country'],'taxPayerId': opts['taxPayerId'],'liabilityWaiver': opts['liabilityWaiver']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/taxResidences/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the taxResidencesPost operation.
     * @callback moduleapi/TaxResidenceApi~taxResidencesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a residence
     * Create a new tax residence.
     * @param {Number} userId User&#x27;s id residence
     * @param {String} country country of the resident
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will  contact you if so. More info  [here](https://agent.treezor.com/security-authentication).
     * @param {String} opts.taxPayerId Tax payer&#x27;s id
     * @param {Boolean} opts.liabilityWaiver When there is no taxPayerId for a residence, this field shall be set to true.
     * @param {module:api/TaxResidenceApi~taxResidencesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    taxResidencesPost(userId, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling taxResidencesPost");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling taxResidencesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'userId': userId,'country': country,'taxPayerId': opts['taxPayerId'],'liabilityWaiver': opts['liabilityWaiver']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/taxResidences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
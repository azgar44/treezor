/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponseDefault} from '../model/InlineResponseDefault';
import {RestrictionGroupLimits} from '../model/RestrictionGroupLimits';

/**
* Card service.
* @module api/CardApi
* @version 0.1.1
*/
export class CardApi {

    /**
    * Constructs a new CardApi. 
    * @alias module:api/CardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cardimagesGet operation.
     * @callback moduleapi/CardApi~cardimagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a card image
     * Return virtual card&#x27;s image
     * @param {Number} cardId Vitual card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardimagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardimagesGet(cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardimagesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'cardId': cardId,'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/cardimages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsCreateVirtualPost operation.
     * @callback moduleapi/CardApi~cardsCreateVirtualPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a virtual card
     * Create a new virtual card. To use a card you will need to activate it (/cards/{id}/Activate/).
     * @param {Number} userId User&#x27;s id of cardholder
     * @param {Number} walletId Wallet&#x27;s Id in which to create the card
     * @param {String} permsGroup Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
     * @param {String} cardPrint Card appareance code, also used to choose the program ID of the card
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.cardTag Custom field
     * @param {Number} opts.batchDeliveryId Batch regroupement identifier (must be between 1 and 238327) NOT YET OPERATIONAL
     * @param {Number} opts.limitAtmYear ATM operations limit for a sliding year. No default value.
     * @param {Number} opts.limitAtmMonth ATM operations limit for a sliding month. No default value.
     * @param {Number} opts.limitAtmWeek ATM operations limit for a sliding week. Default value 2000â‚¬.
     * @param {Number} opts.limitAtmDay ATM operations limit for a single day. Default value 1000â‚¬.
     * @param {Number} opts.limitAtmAll ATM operations limit from beginning. No default value.
     * @param {Number} opts.limitPaymentYear POS operations limit for a sliding year. No default value.
     * @param {Number} opts.limitPaymentMonth POS operations limit for a sliding month. No default value.
     * @param {Number} opts.limitPaymentWeek POS operations limit for a sliding week. Default value 3000â‚¬.
     * @param {Number} opts.limitPaymentDay POS operations limit for a single day. Default value 2000â‚¬.
     * @param {Number} opts.limitPaymentAll POS operations limit from beginning. No default value.
     * @param {Number} opts.paymentDailyLimit POS operations limit for a single day including cents. The decimal delimiter must be \&quot;.\&quot;. No default value.
     * @param {String} opts.pin Card&#x27;s PIN code value.
     * @param {Number} opts.anonymous Card is anonymous. If value is 1 there will be no embossed name.
     * @param {Number} opts.sendToParent If you put the value 1 the delivery address will be the parent user&#x27;s.
     * @param {Number} opts.mccRestrictionGroupId mccRestrictionGroupId you want to apply
     * @param {Number} opts.merchantRestrictionGroupId merchantRestrictionGroupId you want to apply
     * @param {Number} opts.countryRestrictionGroupId countryRestrictionGroupId you want to apply
     * @param {Boolean} opts.embossLegalName Set true if you want emboss the legal name. (default to <.>)
     * @param {String} opts.logoId logoId for co-branding. Can&#x27;t be more than 30 characters
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Object} opts.packageId Packaging reference for card shipping. Maximum 8 characters
     * @param {module:api/CardApi~cardsCreateVirtualPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsCreateVirtualPost(userId, walletId, permsGroup, cardPrint, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling cardsCreateVirtualPost");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling cardsCreateVirtualPost");
      }
      // verify the required parameter 'permsGroup' is set
      if (permsGroup === undefined || permsGroup === null) {
        throw new Error("Missing the required parameter 'permsGroup' when calling cardsCreateVirtualPost");
      }
      // verify the required parameter 'cardPrint' is set
      if (cardPrint === undefined || cardPrint === null) {
        throw new Error("Missing the required parameter 'cardPrint' when calling cardsCreateVirtualPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'userId': userId,'walletId': walletId,'permsGroup': permsGroup,'cardTag': opts['cardTag'],'batchDeliveryId': opts['batchDeliveryId'],'limitAtmYear': opts['limitAtmYear'],'limitAtmMonth': opts['limitAtmMonth'],'limitAtmWeek': opts['limitAtmWeek'],'limitAtmDay': opts['limitAtmDay'],'limitAtmAll': opts['limitAtmAll'],'limitPaymentYear': opts['limitPaymentYear'],'limitPaymentMonth': opts['limitPaymentMonth'],'limitPaymentWeek': opts['limitPaymentWeek'],'limitPaymentDay': opts['limitPaymentDay'],'limitPaymentAll': opts['limitPaymentAll'],'paymentDailyLimit': opts['paymentDailyLimit'],'pin': opts['pin'],'cardPrint': cardPrint,'anonymous': opts['anonymous'],'sendToParent': opts['sendToParent'],'mccRestrictionGroupId': opts['mccRestrictionGroupId'],'merchantRestrictionGroupId': opts['merchantRestrictionGroupId'],'countryRestrictionGroupId': opts['countryRestrictionGroupId'],'embossLegalName': opts['embossLegalName'],'logoId': opts['logoId'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'packageId': opts['packageId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/CreateVirtual', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsGet operation.
     * @callback moduleapi/CardApi~cardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search cards
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.cardId Card&#x27;s id
     * @param {Number} opts.userId User&#x27;s id of cardholder
     * @param {String} opts.embossedName Embossed name of the card
     * @param {String} opts.publicToken Public token of the card
     * @param {String} opts.permsGroup Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
     * @param {Number} opts.isPhysical | Value | Type | | --- | --- | | 1 | Physical card| | 0 | Virtual card | 
     * @param {Number} opts.isConverted | Value | Type | | --- | --- | | 1 | Physical card converted in a virtual card| | 0 | Not converted | 
     * @param {Number} opts.lockStatus | Value | Type | | --- | --- | | 1 | Card blocked | | 0 | Card Unblocked | | 2 | Lost card | | 3 | Stolen card | 
     * @param {Number} opts.mccRestrictionGroupId mccRestrictionGroupId of the card
     * @param {Number} opts.merchantRestrictionGroupId merchantRestrictionGroupId of the card
     * @param {Number} opts.countryRestrictionGroupId countryRestrictionGroupId of the card
     * @param {Number} opts.pageNumber Pagination page number. More info [here](https://agent.treezor.com/lists). 
     * @param {Number} opts.pageCount The number of items per page. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortBy The transaction element you want to sort the list with. Default value : _createdDate_. More info [here](https://agent.treezor.com/lists). 
     * @param {String} opts.sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
     * @param {Date} opts.createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {Date} opts.updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
     * @param {module:api/CardApi~cardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'cardId': opts['cardId'],'userId': opts['userId'],'embossedName': opts['embossedName'],'publicToken': opts['publicToken'],'permsGroup': opts['permsGroup'],'isPhysical': opts['isPhysical'],'isConverted': opts['isConverted'],'lockStatus': opts['lockStatus'],'mccRestrictionGroupId': opts['mccRestrictionGroupId'],'merchantRestrictionGroupId': opts['merchantRestrictionGroupId'],'countryRestrictionGroupId': opts['countryRestrictionGroupId'],'pageNumber': opts['pageNumber'],'pageCount': opts['pageCount'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'createdDateFrom': opts['createdDateFrom'],'createdDateTo': opts['createdDateTo'],'updatedDateFrom': opts['updatedDateFrom'],'updatedDateTo': opts['updatedDateTo']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdActivatePut operation.
     * @callback moduleapi/CardApi~cardsIdActivatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * activate a card
     * The Activate endpoint change card status to activate. An activated card can be freely used. 
     * @param {Number} id Card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken Access token must be defined here or in Authorization HTTP header. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdActivatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdActivatePut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdActivatePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessToken': opts['accessToken'],'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/Activate/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdChangePINPut operation.
     * @callback moduleapi/CardApi~cardsIdChangePINPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * change card&#x27;s PIN
     * Change card&#x27;s PIN code knowing the current one.
     * @param {Number} id Card&#x27;s id.
     * @param {String} currentPIN Card&#x27;s current PIN
     * @param {String} newPIN Card&#x27;s new PIN
     * @param {String} confirmPIN Card&#x27;s new PIN confirmation value
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdChangePINPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdChangePINPut(id, currentPIN, newPIN, confirmPIN, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdChangePINPut");
      }
      // verify the required parameter 'currentPIN' is set
      if (currentPIN === undefined || currentPIN === null) {
        throw new Error("Missing the required parameter 'currentPIN' when calling cardsIdChangePINPut");
      }
      // verify the required parameter 'newPIN' is set
      if (newPIN === undefined || newPIN === null) {
        throw new Error("Missing the required parameter 'newPIN' when calling cardsIdChangePINPut");
      }
      // verify the required parameter 'confirmPIN' is set
      if (confirmPIN === undefined || confirmPIN === null) {
        throw new Error("Missing the required parameter 'confirmPIN' when calling cardsIdChangePINPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'currentPIN': currentPIN,'newPIN': newPIN,'confirmPIN': confirmPIN,'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/ChangePIN/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdConvertVirtualPut operation.
     * @callback moduleapi/CardApi~cardsIdConvertVirtualPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * convert card to virtual
     * Convert a virtual card into a physical one. The converted card will be both virtual and physical. 
     * @param {Number} id Card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdConvertVirtualPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdConvertVirtualPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdConvertVirtualPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/ConvertVirtual/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdGet operation.
     * @callback moduleapi/CardApi~cardsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a card
     * @param {Number} id Card&#x27;s id.
     * @param {module:api/CardApi~cardsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdLimitsPut operation.
     * @callback moduleapi/CardApi~cardsIdLimitsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update card&#x27;s limits
     * Update of the card limits.
     * @param {Number} id Card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {Number} opts.limitAtmYear ATM year limit
     * @param {Number} opts.limitAtmMonth ATM month limit
     * @param {Number} opts.limitAtmWeek ATM week limit
     * @param {Number} opts.limitAtmDay ATM day limit
     * @param {Number} opts.limitAtmAll ATM from beginning limit
     * @param {Number} opts.limitPaymentYear Payment year limit
     * @param {Number} opts.limitPaymentMonth Payment month limit
     * @param {Number} opts.limitPaymentWeek Payment week limit
     * @param {Number} opts.limitPaymentDay Payment day limit
     * @param {Number} opts.limitPaymentAll Payment from beginning limit
     * @param {Number} opts.paymentDailyLimit Payment day limit including cents. The decimal delimiter must be \&quot;.\&quot;
     * @param {Array.<module:model/RestrictionGroupLimits>} opts.restrictionGroupLimits Group of limits based on Restriction Groups. By now, only Restaurant Payment Vouchers with paymentDailyLimit can use this field. Furthermore, one of &#x60;mccRestrictionGroups&#x60;, &#x60;countryRestrictionGroups&#x60; or &#x60;merchantIdRestrictionGroups&#x60; must be present (i.e. &#x60;paymentDailyLimit&#x60; can&#x27;t be alone).
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdLimitsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdLimitsPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdLimitsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'limitAtmYear': opts['limitAtmYear'],'limitAtmMonth': opts['limitAtmMonth'],'limitAtmWeek': opts['limitAtmWeek'],'limitAtmDay': opts['limitAtmDay'],'limitAtmAll': opts['limitAtmAll'],'limitPaymentYear': opts['limitPaymentYear'],'limitPaymentMonth': opts['limitPaymentMonth'],'limitPaymentWeek': opts['limitPaymentWeek'],'limitPaymentDay': opts['limitPaymentDay'],'limitPaymentAll': opts['limitPaymentAll'],'paymentDailyLimit': opts['paymentDailyLimit'],'restrictionGroupLimits': this.apiClient.buildCollectionParam(opts['restrictionGroupLimits'], 'csv'),'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/Limits/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdLockUnlockPut operation.
     * @callback moduleapi/CardApi~cardsIdLockUnlockPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update card&#x27;s blocking status
     * Block or unblock a card.
     * @param {Number} id Card&#x27;s id.
     * @param {Number} lockStatus | Value | Type | | --- | --- | | 1 | Block the card| | 0 | Unblock the card | | 2 | Lost card | | 3 | Stolen card | 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdLockUnlockPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdLockUnlockPut(id, lockStatus, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdLockUnlockPut");
      }
      // verify the required parameter 'lockStatus' is set
      if (lockStatus === undefined || lockStatus === null) {
        throw new Error("Missing the required parameter 'lockStatus' when calling cardsIdLockUnlockPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'lockStatus': lockStatus,'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/LockUnlock/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdOptionsPut operation.
     * @callback moduleapi/CardApi~cardsIdOptionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update card&#x27;s options
     * Allows to update card&#x27;s permission group.
     * @param {Number} id Card&#x27;s id.
     * @param {Number} foreign Card usable abroad
     * @param {Number} online Card usable on-line
     * @param {Number} atm Card usable on ATM (withdrawals)
     * @param {Number} nfc Card usable on contactless compatible POS machine machine\&quot;
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdOptionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdOptionsPut(id, foreign, online, atm, nfc, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdOptionsPut");
      }
      // verify the required parameter 'foreign' is set
      if (foreign === undefined || foreign === null) {
        throw new Error("Missing the required parameter 'foreign' when calling cardsIdOptionsPut");
      }
      // verify the required parameter 'online' is set
      if (online === undefined || online === null) {
        throw new Error("Missing the required parameter 'online' when calling cardsIdOptionsPut");
      }
      // verify the required parameter 'atm' is set
      if (atm === undefined || atm === null) {
        throw new Error("Missing the required parameter 'atm' when calling cardsIdOptionsPut");
      }
      // verify the required parameter 'nfc' is set
      if (nfc === undefined || nfc === null) {
        throw new Error("Missing the required parameter 'nfc' when calling cardsIdOptionsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'foreign': foreign,'online': online,'atm': atm,'nfc': nfc,'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/Options/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdPut operation.
     * @callback moduleapi/CardApi~cardsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update card informations
     * Actually update mccRestrictionGroupId and merchantRestrictionGroupId of a card
     * @param {Number} id Card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {Number} opts.mccRestrictionGroupId card&#x27;s mccRestrictionGroupId
     * @param {Number} opts.merchantRestrictionGroupId card&#x27;s merchantRestrictionGroupId
     * @param {Number} opts.countryRestrictionGroupId card&#x27;s countryRestrictionGroupId
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'mccRestrictionGroupId': opts['mccRestrictionGroupId'],'merchantRestrictionGroupId': opts['merchantRestrictionGroupId'],'countryRestrictionGroupId': opts['countryRestrictionGroupId'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdRegeneratePut operation.
     * @callback moduleapi/CardApi~cardsIdRegeneratePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * regenerate card
     * only recreate the card image if the card is unlocked. 
     * @param {Number} id Card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdRegeneratePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdRegeneratePut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdRegeneratePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/Regenerate/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdSetPINPut operation.
     * @callback moduleapi/CardApi~cardsIdSetPINPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set card&#x27;s PIN
     * Overwrite card&#x27;s PIN.
     * @param {Number} id Card&#x27;s id.
     * @param {String} newPIN Card&#x27;s new PIN.
     * @param {String} confirmPIN Card&#x27;s new PIN confirmation value
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdSetPINPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdSetPINPut(id, newPIN, confirmPIN, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdSetPINPut");
      }
      // verify the required parameter 'newPIN' is set
      if (newPIN === undefined || newPIN === null) {
        throw new Error("Missing the required parameter 'newPIN' when calling cardsIdSetPINPut");
      }
      // verify the required parameter 'confirmPIN' is set
      if (confirmPIN === undefined || confirmPIN === null) {
        throw new Error("Missing the required parameter 'confirmPIN' when calling cardsIdSetPINPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'newPIN': newPIN,'confirmPIN': confirmPIN,'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/setPIN/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsIdUnblockPINPut operation.
     * @callback moduleapi/CardApi~cardsIdUnblockPINPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unblock card&#x27;s PIN
     * Unblock card&#x27;s PIN code.
     * @param {Number} id Card&#x27;s id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {module:api/CardApi~cardsIdUnblockPINPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsIdUnblockPINPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cardsIdUnblockPINPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/{id}/UnblockPIN/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsRegister3DSPost operation.
     * @callback moduleapi/CardApi~cardsRegister3DSPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register 3D secure
     * Register a card to 3D secure service. The user&#x27;s mobile number must begin by \&quot;+\&quot;, or \&quot;00\&quot;, and the country dialing code.
     * @param {Number} cardId Card&#x27;s ID to register
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication).
     * @param {module:api/CardApi~cardsRegister3DSPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsRegister3DSPost(cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardsRegister3DSPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'cardId': cardId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/Register3DS', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cardsRequestPhysicalPost operation.
     * @callback moduleapi/CardApi~cardsRequestPhysicalPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a physical card
     * Create a new physical card. To use a card you will need to activate it (/cards/{id}/Activate/).
     * @param {Number} userId User&#x27;s id of cardholder
     * @param {Number} walletId Wallet&#x27;s Id in which to create the card
     * @param {String} permsGroup Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
     * @param {String} cardTag Custom field
     * @param {String} cardPrint Card appearance code, also used to choose the program ID of the card
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessSignature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
     * @param {Number} opts.batchDeliveryId Batch regroupement identifier (must be between 1 and 238327) NOT YET OPERATIONAL
     * @param {Number} opts.limitAtmYear ATM operations limit for a sliding year. No default value.
     * @param {Number} opts.limitAtmMonth ATM operations limit for a sliding month. No default value.
     * @param {Number} opts.limitAtmWeek ATM operations limit for a sliding week. Default value 2000â‚¬.
     * @param {Number} opts.limitAtmDay ATM operations limit for a single day. Default value 1000â‚¬.
     * @param {Number} opts.limitAtmAll ATM operations limit from beginning. No default value.
     * @param {Number} opts.limitPaymentYear POS operations limit for a sliding year. No default value.
     * @param {Number} opts.limitPaymentMonth POS operations limit for a sliding month. No default value.
     * @param {Number} opts.limitPaymentWeek POS operations limit for a sliding week. Default value 3000â‚¬.
     * @param {Number} opts.limitPaymentDay POS operations limit for a single day. Default value 2000â‚¬.
     * @param {Number} opts.limitPaymentAll POS operations limit from beginning. No default value.
     * @param {Number} opts.paymentDailyLimit POS operations limit for a single day including cents. The decimal delimiter must be \&quot;.\&quot;. No default value.
     * @param {String} opts.pin Card&#x27;s PIN code value. Default random PIN.
     * @param {Number} opts.anonymous Card is anonymous. If value is 1 there will be no embossed name.
     * @param {Number} opts.sendToParent If you put the value 1 the delivery address will be the parent user&#x27;s.
     * @param {Number} opts.mccRestrictionGroupId mccRestrictionGroupId you want to apply
     * @param {Number} opts.merchantRestrictionGroupId merchantRestrictionGroupId you want to apply
     * @param {Number} opts.countryRestrictionGroupId countryRestrictionGroupId you want to apply
     * @param {Boolean} opts.embossLegalName Set true if you want emboss the legal name. (default to <.>)
     * @param {String} opts.logoId logoId for co-branding. Can&#x27;t be more than 30 characters
     * @param {String} opts.accessTag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
     * @param {Number} opts.accessUserId Access user&#x27;s id is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {String} opts.accessUserIp Access user&#x27;s ip is used for user&#x27;s action restriction. More info [here](https://agent.treezor.com/basics). 
     * @param {Object} opts.packageId Packaging reference for card shipping. Maximum 8 characters
     * @param {module:api/CardApi~cardsRequestPhysicalPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cardsRequestPhysicalPost(userId, walletId, permsGroup, cardTag, cardPrint, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling cardsRequestPhysicalPost");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling cardsRequestPhysicalPost");
      }
      // verify the required parameter 'permsGroup' is set
      if (permsGroup === undefined || permsGroup === null) {
        throw new Error("Missing the required parameter 'permsGroup' when calling cardsRequestPhysicalPost");
      }
      // verify the required parameter 'cardTag' is set
      if (cardTag === undefined || cardTag === null) {
        throw new Error("Missing the required parameter 'cardTag' when calling cardsRequestPhysicalPost");
      }
      // verify the required parameter 'cardPrint' is set
      if (cardPrint === undefined || cardPrint === null) {
        throw new Error("Missing the required parameter 'cardPrint' when calling cardsRequestPhysicalPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'accessSignature': opts['accessSignature'],'userId': userId,'walletId': walletId,'permsGroup': permsGroup,'cardTag': cardTag,'batchDeliveryId': opts['batchDeliveryId'],'limitAtmYear': opts['limitAtmYear'],'limitAtmMonth': opts['limitAtmMonth'],'limitAtmWeek': opts['limitAtmWeek'],'limitAtmDay': opts['limitAtmDay'],'limitAtmAll': opts['limitAtmAll'],'limitPaymentYear': opts['limitPaymentYear'],'limitPaymentMonth': opts['limitPaymentMonth'],'limitPaymentWeek': opts['limitPaymentWeek'],'limitPaymentDay': opts['limitPaymentDay'],'limitPaymentAll': opts['limitPaymentAll'],'paymentDailyLimit': opts['paymentDailyLimit'],'pin': opts['pin'],'cardPrint': cardPrint,'anonymous': opts['anonymous'],'sendToParent': opts['sendToParent'],'mccRestrictionGroupId': opts['mccRestrictionGroupId'],'merchantRestrictionGroupId': opts['merchantRestrictionGroupId'],'countryRestrictionGroupId': opts['countryRestrictionGroupId'],'embossLegalName': opts['embossLegalName'],'logoId': opts['logoId'],'accessTag': opts['accessTag'],'accessUserId': opts['accessUserId'],'accessUserIp': opts['accessUserIp'],'packageId': opts['packageId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cards/RequestPhysical', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
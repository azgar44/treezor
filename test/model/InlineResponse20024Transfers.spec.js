/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20024Transfers', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20024Transfers();
      });

      it('should create an instance of InlineResponse20024Transfers', function() {
        // TODO: update the code to test InlineResponse20024Transfers
        expect(instance).to.be.a(Treezor.InlineResponse20024Transfers);
      });

      it('should have the property transferId (base name: "transferId")', function() {
        // TODO: update the code to test the property transferId
        expect(instance).to.have.property('transferId');
        // expect(instance.transferId).to.be(expectedValueLiteral);
      });

      it('should have the property transferStatus (base name: "transferStatus")', function() {
        // TODO: update the code to test the property transferStatus
        expect(instance).to.have.property('transferStatus');
        // expect(instance.transferStatus).to.be(expectedValueLiteral);
      });

      it('should have the property transferTag (base name: "transferTag")', function() {
        // TODO: update the code to test the property transferTag
        expect(instance).to.have.property('transferTag');
        // expect(instance.transferTag).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property walletTypeId (base name: "walletTypeId")', function() {
        // TODO: update the code to test the property walletTypeId
        expect(instance).to.have.property('walletTypeId');
        // expect(instance.walletTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryWalletId (base name: "beneficiaryWalletId")', function() {
        // TODO: update the code to test the property beneficiaryWalletId
        expect(instance).to.have.property('beneficiaryWalletId');
        // expect(instance.beneficiaryWalletId).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryWalletTypeId (base name: "beneficiaryWalletTypeId")', function() {
        // TODO: update the code to test the property beneficiaryWalletTypeId
        expect(instance).to.have.property('beneficiaryWalletTypeId');
        // expect(instance.beneficiaryWalletTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property transferDate (base name: "transferDate")', function() {
        // TODO: update the code to test the property transferDate
        expect(instance).to.have.property('transferDate');
        // expect(instance.transferDate).to.be(expectedValueLiteral);
      });

      it('should have the property walletEventName (base name: "walletEventName")', function() {
        // TODO: update the code to test the property walletEventName
        expect(instance).to.have.property('walletEventName');
        // expect(instance.walletEventName).to.be(expectedValueLiteral);
      });

      it('should have the property walletAlias (base name: "walletAlias")', function() {
        // TODO: update the code to test the property walletAlias
        expect(instance).to.have.property('walletAlias');
        // expect(instance.walletAlias).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryWalletEventName (base name: "beneficiaryWalletEventName")', function() {
        // TODO: update the code to test the property beneficiaryWalletEventName
        expect(instance).to.have.property('beneficiaryWalletEventName');
        // expect(instance.beneficiaryWalletEventName).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryWalletAlias (base name: "beneficiaryWalletAlias")', function() {
        // TODO: update the code to test the property beneficiaryWalletAlias
        expect(instance).to.have.property('beneficiaryWalletAlias');
        // expect(instance.beneficiaryWalletAlias).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property transferTypeId (base name: "transferTypeId")', function() {
        // TODO: update the code to test the property transferTypeId
        expect(instance).to.have.property('transferTypeId');
        // expect(instance.transferTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

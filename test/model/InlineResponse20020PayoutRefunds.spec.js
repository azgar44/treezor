/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20020PayoutRefunds', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20020PayoutRefunds();
      });

      it('should create an instance of InlineResponse20020PayoutRefunds', function() {
        // TODO: update the code to test InlineResponse20020PayoutRefunds
        expect(instance).to.be.a(Treezor.InlineResponse20020PayoutRefunds);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property codeStatus (base name: "codeStatus")', function() {
        // TODO: update the code to test the property codeStatus
        expect(instance).to.have.property('codeStatus');
        // expect(instance.codeStatus).to.be(expectedValueLiteral);
      });

      it('should have the property informationStatus (base name: "informationStatus")', function() {
        // TODO: update the code to test the property informationStatus
        expect(instance).to.have.property('informationStatus');
        // expect(instance.informationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property payoutId (base name: "payoutId")', function() {
        // TODO: update the code to test the property payoutId
        expect(instance).to.have.property('payoutId');
        // expect(instance.payoutId).to.be(expectedValueLiteral);
      });

      it('should have the property requestAmount (base name: "requestAmount")', function() {
        // TODO: update the code to test the property requestAmount
        expect(instance).to.have.property('requestAmount');
        // expect(instance.requestAmount).to.be(expectedValueLiteral);
      });

      it('should have the property requestCurrency (base name: "requestCurrency")', function() {
        // TODO: update the code to test the property requestCurrency
        expect(instance).to.have.property('requestCurrency');
        // expect(instance.requestCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property requestComment (base name: "requestComment")', function() {
        // TODO: update the code to test the property requestComment
        expect(instance).to.have.property('requestComment');
        // expect(instance.requestComment).to.be(expectedValueLiteral);
      });

      it('should have the property reasonCode (base name: "reasonCode")', function() {
        // TODO: update the code to test the property reasonCode
        expect(instance).to.have.property('reasonCode');
        // expect(instance.reasonCode).to.be(expectedValueLiteral);
      });

      it('should have the property refundAmount (base name: "refundAmount")', function() {
        // TODO: update the code to test the property refundAmount
        expect(instance).to.have.property('refundAmount');
        // expect(instance.refundAmount).to.be(expectedValueLiteral);
      });

      it('should have the property refundCurrency (base name: "refundCurrency")', function() {
        // TODO: update the code to test the property refundCurrency
        expect(instance).to.have.property('refundCurrency');
        // expect(instance.refundCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property refundDate (base name: "refundDate")', function() {
        // TODO: update the code to test the property refundDate
        expect(instance).to.have.property('refundDate');
        // expect(instance.refundDate).to.be(expectedValueLiteral);
      });

      it('should have the property refundComment (base name: "refundComment")', function() {
        // TODO: update the code to test the property refundComment
        expect(instance).to.have.property('refundComment');
        // expect(instance.refundComment).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

    });
  });

}));

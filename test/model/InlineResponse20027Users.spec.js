/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20027Users', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20027Users();
      });

      it('should create an instance of InlineResponse20027Users', function() {
        // TODO: update the code to test InlineResponse20027Users
        expect(instance).to.be.a(Treezor.InlineResponse20027Users);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property userTypeId (base name: "userTypeId")', function() {
        // TODO: update the code to test the property userTypeId
        expect(instance).to.have.property('userTypeId');
        // expect(instance.userTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property userStatus (base name: "userStatus")', function() {
        // TODO: update the code to test the property userStatus
        expect(instance).to.have.property('userStatus');
        // expect(instance.userStatus).to.be(expectedValueLiteral);
      });

      it('should have the property userTag (base name: "userTag")', function() {
        // TODO: update the code to test the property userTag
        expect(instance).to.have.property('userTag');
        // expect(instance.userTag).to.be(expectedValueLiteral);
      });

      it('should have the property parentUserId (base name: "parentUserId")', function() {
        // TODO: update the code to test the property parentUserId
        expect(instance).to.have.property('parentUserId');
        // expect(instance.parentUserId).to.be(expectedValueLiteral);
      });

      it('should have the property parentType (base name: "parentType")', function() {
        // TODO: update the code to test the property parentType
        expect(instance).to.have.property('parentType');
        // expect(instance.parentType).to.be(expectedValueLiteral);
      });

      it('should have the property controllingPersonType (base name: "controllingPersonType")', function() {
        // TODO: update the code to test the property controllingPersonType
        expect(instance).to.have.property('controllingPersonType');
        // expect(instance.controllingPersonType).to.be(expectedValueLiteral);
      });

      it('should have the property employeeType (base name: "employeeType")', function() {
        // TODO: update the code to test the property employeeType
        expect(instance).to.have.property('employeeType');
        // expect(instance.employeeType).to.be(expectedValueLiteral);
      });

      it('should have the property specifiedUSPerson (base name: "specifiedUSPerson")', function() {
        // TODO: update the code to test the property specifiedUSPerson
        expect(instance).to.have.property('specifiedUSPerson');
        // expect(instance.specifiedUSPerson).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property firstname (base name: "firstname")', function() {
        // TODO: update the code to test the property firstname
        expect(instance).to.have.property('firstname');
        // expect(instance.firstname).to.be(expectedValueLiteral);
      });

      it('should have the property lastname (base name: "lastname")', function() {
        // TODO: update the code to test the property lastname
        expect(instance).to.have.property('lastname');
        // expect(instance.lastname).to.be(expectedValueLiteral);
      });

      it('should have the property middleNames (base name: "middleNames")', function() {
        // TODO: update the code to test the property middleNames
        expect(instance).to.have.property('middleNames');
        // expect(instance.middleNames).to.be(expectedValueLiteral);
      });

      it('should have the property birthday (base name: "birthday")', function() {
        // TODO: update the code to test the property birthday
        expect(instance).to.have.property('birthday');
        // expect(instance.birthday).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property address1 (base name: "address1")', function() {
        // TODO: update the code to test the property address1
        expect(instance).to.have.property('address1');
        // expect(instance.address1).to.be(expectedValueLiteral);
      });

      it('should have the property address2 (base name: "address2")', function() {
        // TODO: update the code to test the property address2
        expect(instance).to.have.property('address2');
        // expect(instance.address2).to.be(expectedValueLiteral);
      });

      it('should have the property address3 (base name: "address3")', function() {
        // TODO: update the code to test the property address3
        expect(instance).to.have.property('address3');
        // expect(instance.address3).to.be(expectedValueLiteral);
      });

      it('should have the property postcode (base name: "postcode")', function() {
        // TODO: update the code to test the property postcode
        expect(instance).to.have.property('postcode');
        // expect(instance.postcode).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property countryName (base name: "countryName")', function() {
        // TODO: update the code to test the property countryName
        expect(instance).to.have.property('countryName');
        // expect(instance.countryName).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property mobile (base name: "mobile")', function() {
        // TODO: update the code to test the property mobile
        expect(instance).to.have.property('mobile');
        // expect(instance.mobile).to.be(expectedValueLiteral);
      });

      it('should have the property nationality (base name: "nationality")', function() {
        // TODO: update the code to test the property nationality
        expect(instance).to.have.property('nationality');
        // expect(instance.nationality).to.be(expectedValueLiteral);
      });

      it('should have the property nationalityOther (base name: "nationalityOther")', function() {
        // TODO: update the code to test the property nationalityOther
        expect(instance).to.have.property('nationalityOther');
        // expect(instance.nationalityOther).to.be(expectedValueLiteral);
      });

      it('should have the property placeOfBirth (base name: "placeOfBirth")', function() {
        // TODO: update the code to test the property placeOfBirth
        expect(instance).to.have.property('placeOfBirth');
        // expect(instance.placeOfBirth).to.be(expectedValueLiteral);
      });

      it('should have the property birthCountry (base name: "birthCountry")', function() {
        // TODO: update the code to test the property birthCountry
        expect(instance).to.have.property('birthCountry');
        // expect(instance.birthCountry).to.be(expectedValueLiteral);
      });

      it('should have the property occupation (base name: "occupation")', function() {
        // TODO: update the code to test the property occupation
        expect(instance).to.have.property('occupation');
        // expect(instance.occupation).to.be(expectedValueLiteral);
      });

      it('should have the property incomeRange (base name: "incomeRange")', function() {
        // TODO: update the code to test the property incomeRange
        expect(instance).to.have.property('incomeRange');
        // expect(instance.incomeRange).to.be(expectedValueLiteral);
      });

      it('should have the property legalName (base name: "legalName")', function() {
        // TODO: update the code to test the property legalName
        expect(instance).to.have.property('legalName');
        // expect(instance.legalName).to.be(expectedValueLiteral);
      });

      it('should have the property legalNameEmbossed (base name: "legalNameEmbossed")', function() {
        // TODO: update the code to test the property legalNameEmbossed
        expect(instance).to.have.property('legalNameEmbossed');
        // expect(instance.legalNameEmbossed).to.be(expectedValueLiteral);
      });

      it('should have the property legalRegistrationNumber (base name: "legalRegistrationNumber")', function() {
        // TODO: update the code to test the property legalRegistrationNumber
        expect(instance).to.have.property('legalRegistrationNumber');
        // expect(instance.legalRegistrationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property legalTvaNumber (base name: "legalTvaNumber")', function() {
        // TODO: update the code to test the property legalTvaNumber
        expect(instance).to.have.property('legalTvaNumber');
        // expect(instance.legalTvaNumber).to.be(expectedValueLiteral);
      });

      it('should have the property legalRegistrationDate (base name: "legalRegistrationDate")', function() {
        // TODO: update the code to test the property legalRegistrationDate
        expect(instance).to.have.property('legalRegistrationDate');
        // expect(instance.legalRegistrationDate).to.be(expectedValueLiteral);
      });

      it('should have the property legalForm (base name: "legalForm")', function() {
        // TODO: update the code to test the property legalForm
        expect(instance).to.have.property('legalForm');
        // expect(instance.legalForm).to.be(expectedValueLiteral);
      });

      it('should have the property legalShareCapital (base name: "legalShareCapital")', function() {
        // TODO: update the code to test the property legalShareCapital
        expect(instance).to.have.property('legalShareCapital');
        // expect(instance.legalShareCapital).to.be(expectedValueLiteral);
      });

      it('should have the property legalSector (base name: "legalSector")', function() {
        // TODO: update the code to test the property legalSector
        expect(instance).to.have.property('legalSector');
        // expect(instance.legalSector).to.be(expectedValueLiteral);
      });

      it('should have the property legalAnnualTurnOver (base name: "legalAnnualTurnOver")', function() {
        // TODO: update the code to test the property legalAnnualTurnOver
        expect(instance).to.have.property('legalAnnualTurnOver');
        // expect(instance.legalAnnualTurnOver).to.be(expectedValueLiteral);
      });

      it('should have the property legalNetIncomeRange (base name: "legalNetIncomeRange")', function() {
        // TODO: update the code to test the property legalNetIncomeRange
        expect(instance).to.have.property('legalNetIncomeRange');
        // expect(instance.legalNetIncomeRange).to.be(expectedValueLiteral);
      });

      it('should have the property legalNumberOfEmployeeRange (base name: "legalNumberOfEmployeeRange")', function() {
        // TODO: update the code to test the property legalNumberOfEmployeeRange
        expect(instance).to.have.property('legalNumberOfEmployeeRange');
        // expect(instance.legalNumberOfEmployeeRange).to.be(expectedValueLiteral);
      });

      it('should have the property effectiveBeneficiary (base name: "effectiveBeneficiary")', function() {
        // TODO: update the code to test the property effectiveBeneficiary
        expect(instance).to.have.property('effectiveBeneficiary');
        // expect(instance.effectiveBeneficiary).to.be(expectedValueLiteral);
      });

      it('should have the property kycLevel (base name: "kycLevel")', function() {
        // TODO: update the code to test the property kycLevel
        expect(instance).to.have.property('kycLevel');
        // expect(instance.kycLevel).to.be(expectedValueLiteral);
      });

      it('should have the property kycReview (base name: "kycReview")', function() {
        // TODO: update the code to test the property kycReview
        expect(instance).to.have.property('kycReview');
        // expect(instance.kycReview).to.be(expectedValueLiteral);
      });

      it('should have the property kycReviewComment (base name: "kycReviewComment")', function() {
        // TODO: update the code to test the property kycReviewComment
        expect(instance).to.have.property('kycReviewComment');
        // expect(instance.kycReviewComment).to.be(expectedValueLiteral);
      });

      it('should have the property isFreezed (base name: "isFreezed")', function() {
        // TODO: update the code to test the property isFreezed
        expect(instance).to.have.property('isFreezed');
        // expect(instance.isFreezed).to.be(expectedValueLiteral);
      });

      it('should have the property isFrozen (base name: "isFrozen")', function() {
        // TODO: update the code to test the property isFrozen
        expect(instance).to.have.property('isFrozen');
        // expect(instance.isFrozen).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property optInMailing (base name: "optInMailing")', function() {
        // TODO: update the code to test the property optInMailing
        expect(instance).to.have.property('optInMailing');
        // expect(instance.optInMailing).to.be(expectedValueLiteral);
      });

      it('should have the property sepaCreditorIdentifier (base name: "sepaCreditorIdentifier")', function() {
        // TODO: update the code to test the property sepaCreditorIdentifier
        expect(instance).to.have.property('sepaCreditorIdentifier');
        // expect(instance.sepaCreditorIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property taxNumber (base name: "taxNumber")', function() {
        // TODO: update the code to test the property taxNumber
        expect(instance).to.have.property('taxNumber');
        // expect(instance.taxNumber).to.be(expectedValueLiteral);
      });

      it('should have the property taxResidence (base name: "taxResidence")', function() {
        // TODO: update the code to test the property taxResidence
        expect(instance).to.have.property('taxResidence');
        // expect(instance.taxResidence).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property personalAssets (base name: "personalAssets")', function() {
        // TODO: update the code to test the property personalAssets
        expect(instance).to.have.property('personalAssets');
        // expect(instance.personalAssets).to.be(expectedValueLiteral);
      });

      it('should have the property activityOutsideEu (base name: "activityOutsideEu")', function() {
        // TODO: update the code to test the property activityOutsideEu
        expect(instance).to.have.property('activityOutsideEu');
        // expect(instance.activityOutsideEu).to.be(expectedValueLiteral);
      });

      it('should have the property economicSanctions (base name: "economicSanctions")', function() {
        // TODO: update the code to test the property economicSanctions
        expect(instance).to.have.property('economicSanctions');
        // expect(instance.economicSanctions).to.be(expectedValueLiteral);
      });

      it('should have the property residentCountriesSanctions (base name: "residentCountriesSanctions")', function() {
        // TODO: update the code to test the property residentCountriesSanctions
        expect(instance).to.have.property('residentCountriesSanctions');
        // expect(instance.residentCountriesSanctions).to.be(expectedValueLiteral);
      });

      it('should have the property involvedSanctions (base name: "involvedSanctions")', function() {
        // TODO: update the code to test the property involvedSanctions
        expect(instance).to.have.property('involvedSanctions');
        // expect(instance.involvedSanctions).to.be(expectedValueLiteral);
      });

      it('should have the property sanctionsQuestionnaireDate (base name: "sanctionsQuestionnaireDate")', function() {
        // TODO: update the code to test the property sanctionsQuestionnaireDate
        expect(instance).to.have.property('sanctionsQuestionnaireDate');
        // expect(instance.sanctionsQuestionnaireDate).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property walletCount (base name: "walletCount")', function() {
        // TODO: update the code to test the property walletCount
        expect(instance).to.have.property('walletCount');
        // expect(instance.walletCount).to.be(expectedValueLiteral);
      });

      it('should have the property payinCount (base name: "payinCount")', function() {
        // TODO: update the code to test the property payinCount
        expect(instance).to.have.property('payinCount');
        // expect(instance.payinCount).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

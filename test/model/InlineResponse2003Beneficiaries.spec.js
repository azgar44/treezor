/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2003Beneficiaries', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse2003Beneficiaries();
      });

      it('should create an instance of InlineResponse2003Beneficiaries', function() {
        // TODO: update the code to test InlineResponse2003Beneficiaries
        expect(instance).to.be.a(Treezor.InlineResponse2003Beneficiaries);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property nickName (base name: "nickName")', function() {
        // TODO: update the code to test the property nickName
        expect(instance).to.have.property('nickName');
        // expect(instance.nickName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property iban (base name: "iban")', function() {
        // TODO: update the code to test the property iban
        expect(instance).to.have.property('iban');
        // expect(instance.iban).to.be(expectedValueLiteral);
      });

      it('should have the property bic (base name: "bic")', function() {
        // TODO: update the code to test the property bic
        expect(instance).to.have.property('bic');
        // expect(instance.bic).to.be(expectedValueLiteral);
      });

      it('should have the property sepaCreditorIdentifier (base name: "sepaCreditorIdentifier")', function() {
        // TODO: update the code to test the property sepaCreditorIdentifier
        expect(instance).to.have.property('sepaCreditorIdentifier');
        // expect(instance.sepaCreditorIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property sddB2bWhitelist (base name: "sddB2bWhitelist")', function() {
        // TODO: update the code to test the property sddB2bWhitelist
        expect(instance).to.have.property('sddB2bWhitelist');
        // expect(instance.sddB2bWhitelist).to.be(expectedValueLiteral);
      });

      it('should have the property sddCoreBlacklist (base name: "sddCoreBlacklist")', function() {
        // TODO: update the code to test the property sddCoreBlacklist
        expect(instance).to.have.property('sddCoreBlacklist');
        // expect(instance.sddCoreBlacklist).to.be(expectedValueLiteral);
      });

      it('should have the property usableForSct (base name: "usableForSct")', function() {
        // TODO: update the code to test the property usableForSct
        expect(instance).to.have.property('usableForSct');
        // expect(instance.usableForSct).to.be(expectedValueLiteral);
      });

      it('should have the property sddCoreKnownUniqueMandateReference (base name: "sddCoreKnownUniqueMandateReference")', function() {
        // TODO: update the code to test the property sddCoreKnownUniqueMandateReference
        expect(instance).to.have.property('sddCoreKnownUniqueMandateReference');
        // expect(instance.sddCoreKnownUniqueMandateReference).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

    });
  });

}));

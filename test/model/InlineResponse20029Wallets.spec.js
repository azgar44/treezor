/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20029Wallets', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20029Wallets();
      });

      it('should create an instance of InlineResponse20029Wallets', function() {
        // TODO: update the code to test InlineResponse20029Wallets
        expect(instance).to.be.a(Treezor.InlineResponse20029Wallets);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property walletTypeId (base name: "walletTypeId")', function() {
        // TODO: update the code to test the property walletTypeId
        expect(instance).to.have.property('walletTypeId');
        // expect(instance.walletTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property walletStatus (base name: "walletStatus")', function() {
        // TODO: update the code to test the property walletStatus
        expect(instance).to.have.property('walletStatus');
        // expect(instance.walletStatus).to.be(expectedValueLiteral);
      });

      it('should have the property codeStatus (base name: "codeStatus")', function() {
        // TODO: update the code to test the property codeStatus
        expect(instance).to.have.property('codeStatus');
        // expect(instance.codeStatus).to.be(expectedValueLiteral);
      });

      it('should have the property informationStatus (base name: "informationStatus")', function() {
        // TODO: update the code to test the property informationStatus
        expect(instance).to.have.property('informationStatus');
        // expect(instance.informationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property walletTag (base name: "walletTag")', function() {
        // TODO: update the code to test the property walletTag
        expect(instance).to.have.property('walletTag');
        // expect(instance.walletTag).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property userLastname (base name: "userLastname")', function() {
        // TODO: update the code to test the property userLastname
        expect(instance).to.have.property('userLastname');
        // expect(instance.userLastname).to.be(expectedValueLiteral);
      });

      it('should have the property userFirstname (base name: "userFirstname")', function() {
        // TODO: update the code to test the property userFirstname
        expect(instance).to.have.property('userFirstname');
        // expect(instance.userFirstname).to.be(expectedValueLiteral);
      });

      it('should have the property jointUserId (base name: "jointUserId")', function() {
        // TODO: update the code to test the property jointUserId
        expect(instance).to.have.property('jointUserId');
        // expect(instance.jointUserId).to.be(expectedValueLiteral);
      });

      it('should have the property tariffId (base name: "tariffId")', function() {
        // TODO: update the code to test the property tariffId
        expect(instance).to.have.property('tariffId');
        // expect(instance.tariffId).to.be(expectedValueLiteral);
      });

      it('should have the property eventName (base name: "eventName")', function() {
        // TODO: update the code to test the property eventName
        expect(instance).to.have.property('eventName');
        // expect(instance.eventName).to.be(expectedValueLiteral);
      });

      it('should have the property eventAlias (base name: "eventAlias")', function() {
        // TODO: update the code to test the property eventAlias
        expect(instance).to.have.property('eventAlias');
        // expect(instance.eventAlias).to.be(expectedValueLiteral);
      });

      it('should have the property eventDate (base name: "eventDate")', function() {
        // TODO: update the code to test the property eventDate
        expect(instance).to.have.property('eventDate');
        // expect(instance.eventDate).to.be(expectedValueLiteral);
      });

      it('should have the property eventMessage (base name: "eventMessage")', function() {
        // TODO: update the code to test the property eventMessage
        expect(instance).to.have.property('eventMessage');
        // expect(instance.eventMessage).to.be(expectedValueLiteral);
      });

      it('should have the property eventPayinStartDate (base name: "eventPayinStartDate")', function() {
        // TODO: update the code to test the property eventPayinStartDate
        expect(instance).to.have.property('eventPayinStartDate');
        // expect(instance.eventPayinStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property eventPayinEndDate (base name: "eventPayinEndDate")', function() {
        // TODO: update the code to test the property eventPayinEndDate
        expect(instance).to.have.property('eventPayinEndDate');
        // expect(instance.eventPayinEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property contractSigned (base name: "contractSigned")', function() {
        // TODO: update the code to test the property contractSigned
        expect(instance).to.have.property('contractSigned');
        // expect(instance.contractSigned).to.be(expectedValueLiteral);
      });

      it('should have the property bic (base name: "bic")', function() {
        // TODO: update the code to test the property bic
        expect(instance).to.have.property('bic');
        // expect(instance.bic).to.be(expectedValueLiteral);
      });

      it('should have the property iban (base name: "iban")', function() {
        // TODO: update the code to test the property iban
        expect(instance).to.have.property('iban');
        // expect(instance.iban).to.be(expectedValueLiteral);
      });

      it('should have the property urlImage (base name: "urlImage")', function() {
        // TODO: update the code to test the property urlImage
        expect(instance).to.have.property('urlImage');
        // expect(instance.urlImage).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property payinCount (base name: "payinCount")', function() {
        // TODO: update the code to test the property payinCount
        expect(instance).to.have.property('payinCount');
        // expect(instance.payinCount).to.be(expectedValueLiteral);
      });

      it('should have the property payoutCount (base name: "payoutCount")', function() {
        // TODO: update the code to test the property payoutCount
        expect(instance).to.have.property('payoutCount');
        // expect(instance.payoutCount).to.be(expectedValueLiteral);
      });

      it('should have the property transferCount (base name: "transferCount")', function() {
        // TODO: update the code to test the property transferCount
        expect(instance).to.have.property('transferCount');
        // expect(instance.transferCount).to.be(expectedValueLiteral);
      });

      it('should have the property solde (base name: "solde")', function() {
        // TODO: update the code to test the property solde
        expect(instance).to.have.property('solde');
        // expect(instance.solde).to.be(expectedValueLiteral);
      });

      it('should have the property authorizedBalance (base name: "authorizedBalance")', function() {
        // TODO: update the code to test the property authorizedBalance
        expect(instance).to.have.property('authorizedBalance');
        // expect(instance.authorizedBalance).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20028Virtualibans', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20028Virtualibans();
      });

      it('should create an instance of InlineResponse20028Virtualibans', function() {
        // TODO: update the code to test InlineResponse20028Virtualibans
        expect(instance).to.be.a(Treezor.InlineResponse20028Virtualibans);
      });

      it('should have the property virtualIbanId (base name: "virtualIbanId")', function() {
        // TODO: update the code to test the property virtualIbanId
        expect(instance).to.have.property('virtualIbanId');
        // expect(instance.virtualIbanId).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property typeId (base name: "typeId")', function() {
        // TODO: update the code to test the property typeId
        expect(instance).to.have.property('typeId');
        // expect(instance.typeId).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property validFrom (base name: "validFrom")', function() {
        // TODO: update the code to test the property validFrom
        expect(instance).to.have.property('validFrom');
        // expect(instance.validFrom).to.be(expectedValueLiteral);
      });

      it('should have the property validTo (base name: "validTo")', function() {
        // TODO: update the code to test the property validTo
        expect(instance).to.have.property('validTo');
        // expect(instance.validTo).to.be(expectedValueLiteral);
      });

      it('should have the property maxUsage (base name: "maxUsage")', function() {
        // TODO: update the code to test the property maxUsage
        expect(instance).to.have.property('maxUsage');
        // expect(instance.maxUsage).to.be(expectedValueLiteral);
      });

      it('should have the property maxAmount (base name: "maxAmount")', function() {
        // TODO: update the code to test the property maxAmount
        expect(instance).to.have.property('maxAmount');
        // expect(instance.maxAmount).to.be(expectedValueLiteral);
      });

      it('should have the property iban (base name: "iban")', function() {
        // TODO: update the code to test the property iban
        expect(instance).to.have.property('iban');
        // expect(instance.iban).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

    });
  });

}));

/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2006Cards', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse2006Cards();
      });

      it('should create an instance of InlineResponse2006Cards', function() {
        // TODO: update the code to test InlineResponse2006Cards
        expect(instance).to.be.a(Treezor.InlineResponse2006Cards);
      });

      it('should have the property cardId (base name: "cardId")', function() {
        // TODO: update the code to test the property cardId
        expect(instance).to.have.property('cardId');
        // expect(instance.cardId).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property walletCardtransactionId (base name: "walletCardtransactionId")', function() {
        // TODO: update the code to test the property walletCardtransactionId
        expect(instance).to.have.property('walletCardtransactionId');
        // expect(instance.walletCardtransactionId).to.be(expectedValueLiteral);
      });

      it('should have the property mccRestrictionGroupId (base name: "mccRestrictionGroupId")', function() {
        // TODO: update the code to test the property mccRestrictionGroupId
        expect(instance).to.have.property('mccRestrictionGroupId');
        // expect(instance.mccRestrictionGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property merchantRestrictionGroupId (base name: "merchantRestrictionGroupId")', function() {
        // TODO: update the code to test the property merchantRestrictionGroupId
        expect(instance).to.have.property('merchantRestrictionGroupId');
        // expect(instance.merchantRestrictionGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property countryRestrictionGroupId (base name: "countryRestrictionGroupId")', function() {
        // TODO: update the code to test the property countryRestrictionGroupId
        expect(instance).to.have.property('countryRestrictionGroupId');
        // expect(instance.countryRestrictionGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property publicToken (base name: "publicToken")', function() {
        // TODO: update the code to test the property publicToken
        expect(instance).to.have.property('publicToken');
        // expect(instance.publicToken).to.be(expectedValueLiteral);
      });

      it('should have the property cardTag (base name: "cardTag")', function() {
        // TODO: update the code to test the property cardTag
        expect(instance).to.have.property('cardTag');
        // expect(instance.cardTag).to.be(expectedValueLiteral);
      });

      it('should have the property statusCode (base name: "statusCode")', function() {
        // TODO: update the code to test the property statusCode
        expect(instance).to.have.property('statusCode');
        // expect(instance.statusCode).to.be(expectedValueLiteral);
      });

      it('should have the property isLive (base name: "isLive")', function() {
        // TODO: update the code to test the property isLive
        expect(instance).to.have.property('isLive');
        // expect(instance.isLive).to.be(expectedValueLiteral);
      });

      it('should have the property pinTryExceeds (base name: "pinTryExceeds")', function() {
        // TODO: update the code to test the property pinTryExceeds
        expect(instance).to.have.property('pinTryExceeds');
        // expect(instance.pinTryExceeds).to.be(expectedValueLiteral);
      });

      it('should have the property maskedPan (base name: "maskedPan")', function() {
        // TODO: update the code to test the property maskedPan
        expect(instance).to.have.property('maskedPan');
        // expect(instance.maskedPan).to.be(expectedValueLiteral);
      });

      it('should have the property embossedName (base name: "embossedName")', function() {
        // TODO: update the code to test the property embossedName
        expect(instance).to.have.property('embossedName');
        // expect(instance.embossedName).to.be(expectedValueLiteral);
      });

      it('should have the property expiryDate (base name: "expiryDate")', function() {
        // TODO: update the code to test the property expiryDate
        expect(instance).to.have.property('expiryDate');
        // expect(instance.expiryDate).to.be(expectedValueLiteral);
      });

      it('should have the property CVV (base name: "CVV")', function() {
        // TODO: update the code to test the property CVV
        expect(instance).to.have.property('CVV');
        // expect(instance.CVV).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "startDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property countryCode (base name: "countryCode")', function() {
        // TODO: update the code to test the property countryCode
        expect(instance).to.have.property('countryCode');
        // expect(instance.countryCode).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "currencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property lang (base name: "lang")', function() {
        // TODO: update the code to test the property lang
        expect(instance).to.have.property('lang');
        // expect(instance.lang).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryTitle (base name: "deliveryTitle")', function() {
        // TODO: update the code to test the property deliveryTitle
        expect(instance).to.have.property('deliveryTitle');
        // expect(instance.deliveryTitle).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryLastname (base name: "deliveryLastname")', function() {
        // TODO: update the code to test the property deliveryLastname
        expect(instance).to.have.property('deliveryLastname');
        // expect(instance.deliveryLastname).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryFirstname (base name: "deliveryFirstname")', function() {
        // TODO: update the code to test the property deliveryFirstname
        expect(instance).to.have.property('deliveryFirstname');
        // expect(instance.deliveryFirstname).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryAddress1 (base name: "deliveryAddress1")', function() {
        // TODO: update the code to test the property deliveryAddress1
        expect(instance).to.have.property('deliveryAddress1');
        // expect(instance.deliveryAddress1).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryAddress2 (base name: "deliveryAddress2")', function() {
        // TODO: update the code to test the property deliveryAddress2
        expect(instance).to.have.property('deliveryAddress2');
        // expect(instance.deliveryAddress2).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryAddress3 (base name: "deliveryAddress3")', function() {
        // TODO: update the code to test the property deliveryAddress3
        expect(instance).to.have.property('deliveryAddress3');
        // expect(instance.deliveryAddress3).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryCity (base name: "deliveryCity")', function() {
        // TODO: update the code to test the property deliveryCity
        expect(instance).to.have.property('deliveryCity');
        // expect(instance.deliveryCity).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryPostcode (base name: "deliveryPostcode")', function() {
        // TODO: update the code to test the property deliveryPostcode
        expect(instance).to.have.property('deliveryPostcode');
        // expect(instance.deliveryPostcode).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryCountry (base name: "deliveryCountry")', function() {
        // TODO: update the code to test the property deliveryCountry
        expect(instance).to.have.property('deliveryCountry');
        // expect(instance.deliveryCountry).to.be(expectedValueLiteral);
      });

      it('should have the property mobileSent (base name: "mobileSent")', function() {
        // TODO: update the code to test the property mobileSent
        expect(instance).to.have.property('mobileSent');
        // expect(instance.mobileSent).to.be(expectedValueLiteral);
      });

      it('should have the property limitsGroup (base name: "limitsGroup")', function() {
        // TODO: update the code to test the property limitsGroup
        expect(instance).to.have.property('limitsGroup');
        // expect(instance.limitsGroup).to.be(expectedValueLiteral);
      });

      it('should have the property permsGroup (base name: "permsGroup")', function() {
        // TODO: update the code to test the property permsGroup
        expect(instance).to.have.property('permsGroup');
        // expect(instance.permsGroup).to.be(expectedValueLiteral);
      });

      it('should have the property cardDesign (base name: "cardDesign")', function() {
        // TODO: update the code to test the property cardDesign
        expect(instance).to.have.property('cardDesign');
        // expect(instance.cardDesign).to.be(expectedValueLiteral);
      });

      it('should have the property virtualConverted (base name: "virtualConverted")', function() {
        // TODO: update the code to test the property virtualConverted
        expect(instance).to.have.property('virtualConverted');
        // expect(instance.virtualConverted).to.be(expectedValueLiteral);
      });

      it('should have the property optionAtm (base name: "optionAtm")', function() {
        // TODO: update the code to test the property optionAtm
        expect(instance).to.have.property('optionAtm');
        // expect(instance.optionAtm).to.be(expectedValueLiteral);
      });

      it('should have the property optionForeign (base name: "optionForeign")', function() {
        // TODO: update the code to test the property optionForeign
        expect(instance).to.have.property('optionForeign');
        // expect(instance.optionForeign).to.be(expectedValueLiteral);
      });

      it('should have the property optionOnline (base name: "optionOnline")', function() {
        // TODO: update the code to test the property optionOnline
        expect(instance).to.have.property('optionOnline');
        // expect(instance.optionOnline).to.be(expectedValueLiteral);
      });

      it('should have the property optionNfc (base name: "optionNfc")', function() {
        // TODO: update the code to test the property optionNfc
        expect(instance).to.have.property('optionNfc');
        // expect(instance.optionNfc).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmYear (base name: "limitAtmYear")', function() {
        // TODO: update the code to test the property limitAtmYear
        expect(instance).to.have.property('limitAtmYear');
        // expect(instance.limitAtmYear).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmMonth (base name: "limitAtmMonth")', function() {
        // TODO: update the code to test the property limitAtmMonth
        expect(instance).to.have.property('limitAtmMonth');
        // expect(instance.limitAtmMonth).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmWeek (base name: "limitAtmWeek")', function() {
        // TODO: update the code to test the property limitAtmWeek
        expect(instance).to.have.property('limitAtmWeek');
        // expect(instance.limitAtmWeek).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmDay (base name: "limitAtmDay")', function() {
        // TODO: update the code to test the property limitAtmDay
        expect(instance).to.have.property('limitAtmDay');
        // expect(instance.limitAtmDay).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmAll (base name: "limitAtmAll")', function() {
        // TODO: update the code to test the property limitAtmAll
        expect(instance).to.have.property('limitAtmAll');
        // expect(instance.limitAtmAll).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentYear (base name: "limitPaymentYear")', function() {
        // TODO: update the code to test the property limitPaymentYear
        expect(instance).to.have.property('limitPaymentYear');
        // expect(instance.limitPaymentYear).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentMonth (base name: "limitPaymentMonth")', function() {
        // TODO: update the code to test the property limitPaymentMonth
        expect(instance).to.have.property('limitPaymentMonth');
        // expect(instance.limitPaymentMonth).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentWeek (base name: "limitPaymentWeek")', function() {
        // TODO: update the code to test the property limitPaymentWeek
        expect(instance).to.have.property('limitPaymentWeek');
        // expect(instance.limitPaymentWeek).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentDay (base name: "limitPaymentDay")', function() {
        // TODO: update the code to test the property limitPaymentDay
        expect(instance).to.have.property('limitPaymentDay');
        // expect(instance.limitPaymentDay).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentAll (base name: "limitPaymentAll")', function() {
        // TODO: update the code to test the property limitPaymentAll
        expect(instance).to.have.property('limitPaymentAll');
        // expect(instance.limitPaymentAll).to.be(expectedValueLiteral);
      });

      it('should have the property paymentDailyLimit (base name: "paymentDailyLimit")', function() {
        // TODO: update the code to test the property paymentDailyLimit
        expect(instance).to.have.property('paymentDailyLimit');
        // expect(instance.paymentDailyLimit).to.be(expectedValueLiteral);
      });

      it('should have the property restrictionGroupLimits (base name: "restrictionGroupLimits")', function() {
        // TODO: update the code to test the property restrictionGroupLimits
        expect(instance).to.have.property('restrictionGroupLimits');
        // expect(instance.restrictionGroupLimits).to.be(expectedValueLiteral);
      });

      it('should have the property totalAtmYear (base name: "totalAtmYear")', function() {
        // TODO: update the code to test the property totalAtmYear
        expect(instance).to.have.property('totalAtmYear');
        // expect(instance.totalAtmYear).to.be(expectedValueLiteral);
      });

      it('should have the property totalAtmMonth (base name: "totalAtmMonth")', function() {
        // TODO: update the code to test the property totalAtmMonth
        expect(instance).to.have.property('totalAtmMonth');
        // expect(instance.totalAtmMonth).to.be(expectedValueLiteral);
      });

      it('should have the property totalAtmWeek (base name: "totalAtmWeek")', function() {
        // TODO: update the code to test the property totalAtmWeek
        expect(instance).to.have.property('totalAtmWeek');
        // expect(instance.totalAtmWeek).to.be(expectedValueLiteral);
      });

      it('should have the property totalAtmDay (base name: "totalAtmDay")', function() {
        // TODO: update the code to test the property totalAtmDay
        expect(instance).to.have.property('totalAtmDay');
        // expect(instance.totalAtmDay).to.be(expectedValueLiteral);
      });

      it('should have the property totalAtmAll (base name: "totalAtmAll")', function() {
        // TODO: update the code to test the property totalAtmAll
        expect(instance).to.have.property('totalAtmAll');
        // expect(instance.totalAtmAll).to.be(expectedValueLiteral);
      });

      it('should have the property totalPaymentYear (base name: "totalPaymentYear")', function() {
        // TODO: update the code to test the property totalPaymentYear
        expect(instance).to.have.property('totalPaymentYear');
        // expect(instance.totalPaymentYear).to.be(expectedValueLiteral);
      });

      it('should have the property totalPaymentMonth (base name: "totalPaymentMonth")', function() {
        // TODO: update the code to test the property totalPaymentMonth
        expect(instance).to.have.property('totalPaymentMonth');
        // expect(instance.totalPaymentMonth).to.be(expectedValueLiteral);
      });

      it('should have the property totalPaymentWeek (base name: "totalPaymentWeek")', function() {
        // TODO: update the code to test the property totalPaymentWeek
        expect(instance).to.have.property('totalPaymentWeek');
        // expect(instance.totalPaymentWeek).to.be(expectedValueLiteral);
      });

      it('should have the property totalPaymentDay (base name: "totalPaymentDay")', function() {
        // TODO: update the code to test the property totalPaymentDay
        expect(instance).to.have.property('totalPaymentDay');
        // expect(instance.totalPaymentDay).to.be(expectedValueLiteral);
      });

      it('should have the property totalPaymentAll (base name: "totalPaymentAll")', function() {
        // TODO: update the code to test the property totalPaymentAll
        expect(instance).to.have.property('totalPaymentAll');
        // expect(instance.totalPaymentAll).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedBy (base name: "modifiedBy")', function() {
        // TODO: update the code to test the property modifiedBy
        expect(instance).to.have.property('modifiedBy');
        // expect(instance.modifiedBy).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

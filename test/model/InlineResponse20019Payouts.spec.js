/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20019Payouts', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20019Payouts();
      });

      it('should create an instance of InlineResponse20019Payouts', function() {
        // TODO: update the code to test InlineResponse20019Payouts
        expect(instance).to.be.a(Treezor.InlineResponse20019Payouts);
      });

      it('should have the property payoutId (base name: "payoutId")', function() {
        // TODO: update the code to test the property payoutId
        expect(instance).to.have.property('payoutId');
        // expect(instance.payoutId).to.be(expectedValueLiteral);
      });

      it('should have the property payoutTag (base name: "payoutTag")', function() {
        // TODO: update the code to test the property payoutTag
        expect(instance).to.have.property('payoutTag');
        // expect(instance.payoutTag).to.be(expectedValueLiteral);
      });

      it('should have the property payoutStatus (base name: "payoutStatus")', function() {
        // TODO: update the code to test the property payoutStatus
        expect(instance).to.have.property('payoutStatus');
        // expect(instance.payoutStatus).to.be(expectedValueLiteral);
      });

      it('should have the property payoutTypeId (base name: "payoutTypeId")', function() {
        // TODO: update the code to test the property payoutTypeId
        expect(instance).to.have.property('payoutTypeId');
        // expect(instance.payoutTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property payoutType (base name: "payoutType")', function() {
        // TODO: update the code to test the property payoutType
        expect(instance).to.have.property('payoutType');
        // expect(instance.payoutType).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property payoutDate (base name: "payoutDate")', function() {
        // TODO: update the code to test the property payoutDate
        expect(instance).to.have.property('payoutDate');
        // expect(instance.payoutDate).to.be(expectedValueLiteral);
      });

      it('should have the property walletEventName (base name: "walletEventName")', function() {
        // TODO: update the code to test the property walletEventName
        expect(instance).to.have.property('walletEventName');
        // expect(instance.walletEventName).to.be(expectedValueLiteral);
      });

      it('should have the property walletAlias (base name: "walletAlias")', function() {
        // TODO: update the code to test the property walletAlias
        expect(instance).to.have.property('walletAlias');
        // expect(instance.walletAlias).to.be(expectedValueLiteral);
      });

      it('should have the property userFirstname (base name: "userFirstname")', function() {
        // TODO: update the code to test the property userFirstname
        expect(instance).to.have.property('userFirstname');
        // expect(instance.userFirstname).to.be(expectedValueLiteral);
      });

      it('should have the property userLastname (base name: "userLastname")', function() {
        // TODO: update the code to test the property userLastname
        expect(instance).to.have.property('userLastname');
        // expect(instance.userLastname).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountId (base name: "bankaccountId")', function() {
        // TODO: update the code to test the property bankaccountId
        expect(instance).to.have.property('bankaccountId');
        // expect(instance.bankaccountId).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryId (base name: "beneficiaryId")', function() {
        // TODO: update the code to test the property beneficiaryId
        expect(instance).to.have.property('beneficiaryId');
        // expect(instance.beneficiaryId).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueMandateReference (base name: "uniqueMandateReference")', function() {
        // TODO: update the code to test the property uniqueMandateReference
        expect(instance).to.have.property('uniqueMandateReference');
        // expect(instance.uniqueMandateReference).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountIBAN (base name: "bankaccountIBAN")', function() {
        // TODO: update the code to test the property bankaccountIBAN
        expect(instance).to.have.property('bankaccountIBAN');
        // expect(instance.bankaccountIBAN).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property partnerFee (base name: "partnerFee")', function() {
        // TODO: update the code to test the property partnerFee
        expect(instance).to.have.property('partnerFee');
        // expect(instance.partnerFee).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20023Transactions', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20023Transactions();
      });

      it('should create an instance of InlineResponse20023Transactions', function() {
        // TODO: update the code to test InlineResponse20023Transactions
        expect(instance).to.be.a(Treezor.InlineResponse20023Transactions);
      });

      it('should have the property transactionId (base name: "transactionId")', function() {
        // TODO: update the code to test the property transactionId
        expect(instance).to.have.property('transactionId');
        // expect(instance.transactionId).to.be(expectedValueLiteral);
      });

      it('should have the property walletDebitId (base name: "walletDebitId")', function() {
        // TODO: update the code to test the property walletDebitId
        expect(instance).to.have.property('walletDebitId');
        // expect(instance.walletDebitId).to.be(expectedValueLiteral);
      });

      it('should have the property walletCreditId (base name: "walletCreditId")', function() {
        // TODO: update the code to test the property walletCreditId
        expect(instance).to.have.property('walletCreditId');
        // expect(instance.walletCreditId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property valueDate (base name: "valueDate")', function() {
        // TODO: update the code to test the property valueDate
        expect(instance).to.have.property('valueDate');
        // expect(instance.valueDate).to.be(expectedValueLiteral);
      });

      it('should have the property executionDate (base name: "executionDate")', function() {
        // TODO: update the code to test the property executionDate
        expect(instance).to.have.property('executionDate');
        // expect(instance.executionDate).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property walletDebitBalance (base name: "walletDebitBalance")', function() {
        // TODO: update the code to test the property walletDebitBalance
        expect(instance).to.have.property('walletDebitBalance');
        // expect(instance.walletDebitBalance).to.be(expectedValueLiteral);
      });

      it('should have the property walletCreditBalance (base name: "walletCreditBalance")', function() {
        // TODO: update the code to test the property walletCreditBalance
        expect(instance).to.have.property('walletCreditBalance');
        // expect(instance.walletCreditBalance).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20021Recallrs', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20021Recallrs();
      });

      it('should create an instance of InlineResponse20021Recallrs', function() {
        // TODO: update the code to test InlineResponse20021Recallrs
        expect(instance).to.be.a(Treezor.InlineResponse20021Recallrs);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property recallRSepaMessageId (base name: "recallRSepaMessageId")', function() {
        // TODO: update the code to test the property recallRSepaMessageId
        expect(instance).to.have.property('recallRSepaMessageId');
        // expect(instance.recallRSepaMessageId).to.be(expectedValueLiteral);
      });

      it('should have the property cxlId (base name: "cxlId")', function() {
        // TODO: update the code to test the property cxlId
        expect(instance).to.have.property('cxlId');
        // expect(instance.cxlId).to.be(expectedValueLiteral);
      });

      it('should have the property statusId (base name: "statusId")', function() {
        // TODO: update the code to test the property statusId
        expect(instance).to.have.property('statusId');
        // expect(instance.statusId).to.be(expectedValueLiteral);
      });

      it('should have the property statusLabel (base name: "statusLabel")', function() {
        // TODO: update the code to test the property statusLabel
        expect(instance).to.have.property('statusLabel');
        // expect(instance.statusLabel).to.be(expectedValueLiteral);
      });

      it('should have the property reasonCode (base name: "reasonCode")', function() {
        // TODO: update the code to test the property reasonCode
        expect(instance).to.have.property('reasonCode');
        // expect(instance.reasonCode).to.be(expectedValueLiteral);
      });

      it('should have the property additionalInformation (base name: "additionalInformation")', function() {
        // TODO: update the code to test the property additionalInformation
        expect(instance).to.have.property('additionalInformation');
        // expect(instance.additionalInformation).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "clientId")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property userTypeId (base name: "userTypeId")', function() {
        // TODO: update the code to test the property userTypeId
        expect(instance).to.have.property('userTypeId');
        // expect(instance.userTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property userName (base name: "userName")', function() {
        // TODO: update the code to test the property userName
        expect(instance).to.have.property('userName');
        // expect(instance.userName).to.be(expectedValueLiteral);
      });

      it('should have the property userStatusId (base name: "userStatusId")', function() {
        // TODO: update the code to test the property userStatusId
        expect(instance).to.have.property('userStatusId');
        // expect(instance.userStatusId).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property walletStatusId (base name: "walletStatusId")', function() {
        // TODO: update the code to test the property walletStatusId
        expect(instance).to.have.property('walletStatusId');
        // expect(instance.walletStatusId).to.be(expectedValueLiteral);
      });

      it('should have the property walletActivationDate (base name: "walletActivationDate")', function() {
        // TODO: update the code to test the property walletActivationDate
        expect(instance).to.have.property('walletActivationDate');
        // expect(instance.walletActivationDate).to.be(expectedValueLiteral);
      });

      it('should have the property walletDesactivationDate (base name: "walletDesactivationDate")', function() {
        // TODO: update the code to test the property walletDesactivationDate
        expect(instance).to.have.property('walletDesactivationDate');
        // expect(instance.walletDesactivationDate).to.be(expectedValueLiteral);
      });

      it('should have the property sctrAmount (base name: "sctrAmount")', function() {
        // TODO: update the code to test the property sctrAmount
        expect(instance).to.have.property('sctrAmount');
        // expect(instance.sctrAmount).to.be(expectedValueLiteral);
      });

      it('should have the property sctrSettelmentDate (base name: "sctrSettelmentDate")', function() {
        // TODO: update the code to test the property sctrSettelmentDate
        expect(instance).to.have.property('sctrSettelmentDate');
        // expect(instance.sctrSettelmentDate).to.be(expectedValueLiteral);
      });

      it('should have the property sctrDbtrIBAN (base name: "sctrDbtrIBAN")', function() {
        // TODO: update the code to test the property sctrDbtrIBAN
        expect(instance).to.have.property('sctrDbtrIBAN');
        // expect(instance.sctrDbtrIBAN).to.be(expectedValueLiteral);
      });

      it('should have the property sctrDbtrBIC (base name: "sctrDbtrBIC")', function() {
        // TODO: update the code to test the property sctrDbtrBIC
        expect(instance).to.have.property('sctrDbtrBIC');
        // expect(instance.sctrDbtrBIC).to.be(expectedValueLiteral);
      });

      it('should have the property sctrDbtrName (base name: "sctrDbtrName")', function() {
        // TODO: update the code to test the property sctrDbtrName
        expect(instance).to.have.property('sctrDbtrName');
        // expect(instance.sctrDbtrName).to.be(expectedValueLiteral);
      });

      it('should have the property responseSepaMessageId (base name: "responseSepaMessageId")', function() {
        // TODO: update the code to test the property responseSepaMessageId
        expect(instance).to.have.property('responseSepaMessageId');
        // expect(instance.responseSepaMessageId).to.be(expectedValueLiteral);
      });

      it('should have the property receivedDate (base name: "receivedDate")', function() {
        // TODO: update the code to test the property receivedDate
        expect(instance).to.have.property('receivedDate');
        // expect(instance.receivedDate).to.be(expectedValueLiteral);
      });

      it('should have the property payinRefundId (base name: "payinRefundId")', function() {
        // TODO: update the code to test the property payinRefundId
        expect(instance).to.have.property('payinRefundId');
        // expect(instance.payinRefundId).to.be(expectedValueLiteral);
      });

      it('should have the property responseType (base name: "responseType")', function() {
        // TODO: update the code to test the property responseType
        expect(instance).to.have.property('responseType');
        // expect(instance.responseType).to.be(expectedValueLiteral);
      });

      it('should have the property negativeResponseReasonCode (base name: "negativeResponseReasonCode")', function() {
        // TODO: update the code to test the property negativeResponseReasonCode
        expect(instance).to.have.property('negativeResponseReasonCode');
        // expect(instance.negativeResponseReasonCode).to.be(expectedValueLiteral);
      });

      it('should have the property negativeResponseAdditionalInformation (base name: "negativeResponseAdditionalInformation")', function() {
        // TODO: update the code to test the property negativeResponseAdditionalInformation
        expect(instance).to.have.property('negativeResponseAdditionalInformation');
        // expect(instance.negativeResponseAdditionalInformation).to.be(expectedValueLiteral);
      });

      it('should have the property responseComment (base name: "responseComment")', function() {
        // TODO: update the code to test the property responseComment
        expect(instance).to.have.property('responseComment');
        // expect(instance.responseComment).to.be(expectedValueLiteral);
      });

      it('should have the property boResponse (base name: "boResponse")', function() {
        // TODO: update the code to test the property boResponse
        expect(instance).to.have.property('boResponse');
        // expect(instance.boResponse).to.be(expectedValueLiteral);
      });

      it('should have the property frozenWalletFollowingRecallr (base name: "frozenWalletFollowingRecallr")', function() {
        // TODO: update the code to test the property frozenWalletFollowingRecallr
        expect(instance).to.have.property('frozenWalletFollowingRecallr');
        // expect(instance.frozenWalletFollowingRecallr).to.be(expectedValueLiteral);
      });

      it('should have the property automaticResponse (base name: "automaticResponse")', function() {
        // TODO: update the code to test the property automaticResponse
        expect(instance).to.have.property('automaticResponse');
        // expect(instance.automaticResponse).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property fraudConfirmed (base name: "fraudConfirmed")', function() {
        // TODO: update the code to test the property fraudConfirmed
        expect(instance).to.have.property('fraudConfirmed');
        // expect(instance.fraudConfirmed).to.be(expectedValueLiteral);
      });

      it('should have the property partialRefund (base name: "partialRefund")', function() {
        // TODO: update the code to test the property partialRefund
        expect(instance).to.have.property('partialRefund');
        // expect(instance.partialRefund).to.be(expectedValueLiteral);
      });

      it('should have the property inError (base name: "inError")', function() {
        // TODO: update the code to test the property inError
        expect(instance).to.have.property('inError');
        // expect(instance.inError).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property updatedDate (base name: "updatedDate")', function() {
        // TODO: update the code to test the property updatedDate
        expect(instance).to.have.property('updatedDate');
        // expect(instance.updatedDate).to.be(expectedValueLiteral);
      });

    });
  });

}));

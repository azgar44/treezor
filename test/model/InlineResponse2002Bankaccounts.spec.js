/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2002Bankaccounts', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse2002Bankaccounts();
      });

      it('should create an instance of InlineResponse2002Bankaccounts', function() {
        // TODO: update the code to test InlineResponse2002Bankaccounts
        expect(instance).to.be.a(Treezor.InlineResponse2002Bankaccounts);
      });

      it('should have the property bankaccountId (base name: "bankaccountId")', function() {
        // TODO: update the code to test the property bankaccountId
        expect(instance).to.have.property('bankaccountId');
        // expect(instance.bankaccountId).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountStatus (base name: "bankaccountStatus")', function() {
        // TODO: update the code to test the property bankaccountStatus
        expect(instance).to.have.property('bankaccountStatus');
        // expect(instance.bankaccountStatus).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountOwnerName (base name: "bankaccountOwnerName")', function() {
        // TODO: update the code to test the property bankaccountOwnerName
        expect(instance).to.have.property('bankaccountOwnerName');
        // expect(instance.bankaccountOwnerName).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountOwnerAddress (base name: "bankaccountOwnerAddress")', function() {
        // TODO: update the code to test the property bankaccountOwnerAddress
        expect(instance).to.have.property('bankaccountOwnerAddress');
        // expect(instance.bankaccountOwnerAddress).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountIBAN (base name: "bankaccountIBAN")', function() {
        // TODO: update the code to test the property bankaccountIBAN
        expect(instance).to.have.property('bankaccountIBAN');
        // expect(instance.bankaccountIBAN).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountBIC (base name: "bankaccountBIC")', function() {
        // TODO: update the code to test the property bankaccountBIC
        expect(instance).to.have.property('bankaccountBIC');
        // expect(instance.bankaccountBIC).to.be(expectedValueLiteral);
      });

      it('should have the property bankaccountType (base name: "bankaccountType")', function() {
        // TODO: update the code to test the property bankaccountType
        expect(instance).to.have.property('bankaccountType');
        // expect(instance.bankaccountType).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));

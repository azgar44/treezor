/*
 * Treezor
 * Treezor API.  more info [here](https://www.treezor.com). 
 *
 * OpenAPI spec version: 0.1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Treezor);
  }
}(this, function(expect, Treezor) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20010Cardtransactions', function() {
      beforeEach(function() {
        instance = new Treezor.InlineResponse20010Cardtransactions();
      });

      it('should create an instance of InlineResponse20010Cardtransactions', function() {
        // TODO: update the code to test InlineResponse20010Cardtransactions
        expect(instance).to.be.a(Treezor.InlineResponse20010Cardtransactions);
      });

      it('should have the property cardtransactionId (base name: "cardtransactionId")', function() {
        // TODO: update the code to test the property cardtransactionId
        expect(instance).to.have.property('cardtransactionId');
        // expect(instance.cardtransactionId).to.be(expectedValueLiteral);
      });

      it('should have the property cardId (base name: "cardId")', function() {
        // TODO: update the code to test the property cardId
        expect(instance).to.have.property('cardId');
        // expect(instance.cardId).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property acquirerId (base name: "acquirerId")', function() {
        // TODO: update the code to test the property acquirerId
        expect(instance).to.have.property('acquirerId');
        // expect(instance.acquirerId).to.be(expectedValueLiteral);
      });

      it('should have the property walletCurrency (base name: "walletCurrency")', function() {
        // TODO: update the code to test the property walletCurrency
        expect(instance).to.have.property('walletCurrency');
        // expect(instance.walletCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property merchantId (base name: "merchantId")', function() {
        // TODO: update the code to test the property merchantId
        expect(instance).to.have.property('merchantId');
        // expect(instance.merchantId).to.be(expectedValueLiteral);
      });

      it('should have the property merchantName (base name: "merchantName")', function() {
        // TODO: update the code to test the property merchantName
        expect(instance).to.have.property('merchantName');
        // expect(instance.merchantName).to.be(expectedValueLiteral);
      });

      it('should have the property merchantAddress (base name: "merchantAddress")', function() {
        // TODO: update the code to test the property merchantAddress
        expect(instance).to.have.property('merchantAddress');
        // expect(instance.merchantAddress).to.be(expectedValueLiteral);
      });

      it('should have the property merchantCity (base name: "merchantCity")', function() {
        // TODO: update the code to test the property merchantCity
        expect(instance).to.have.property('merchantCity');
        // expect(instance.merchantCity).to.be(expectedValueLiteral);
      });

      it('should have the property merchantCountry (base name: "merchantCountry")', function() {
        // TODO: update the code to test the property merchantCountry
        expect(instance).to.have.property('merchantCountry');
        // expect(instance.merchantCountry).to.be(expectedValueLiteral);
      });

      it('should have the property mccCode (base name: "mccCode")', function() {
        // TODO: update the code to test the property mccCode
        expect(instance).to.have.property('mccCode');
        // expect(instance.mccCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentLocalTime (base name: "paymentLocalTime")', function() {
        // TODO: update the code to test the property paymentLocalTime
        expect(instance).to.have.property('paymentLocalTime');
        // expect(instance.paymentLocalTime).to.be(expectedValueLiteral);
      });

      it('should have the property publicToken (base name: "publicToken")', function() {
        // TODO: update the code to test the property publicToken
        expect(instance).to.have.property('publicToken');
        // expect(instance.publicToken).to.be(expectedValueLiteral);
      });

      it('should have the property paymentAmount (base name: "paymentAmount")', function() {
        // TODO: update the code to test the property paymentAmount
        expect(instance).to.have.property('paymentAmount');
        // expect(instance.paymentAmount).to.be(expectedValueLiteral);
      });

      it('should have the property paymentCurrency (base name: "paymentCurrency")', function() {
        // TODO: update the code to test the property paymentCurrency
        expect(instance).to.have.property('paymentCurrency');
        // expect(instance.paymentCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property fees (base name: "fees")', function() {
        // TODO: update the code to test the property fees
        expect(instance).to.have.property('fees');
        // expect(instance.fees).to.be(expectedValueLiteral);
      });

      it('should have the property paymentCountry (base name: "paymentCountry")', function() {
        // TODO: update the code to test the property paymentCountry
        expect(instance).to.have.property('paymentCountry');
        // expect(instance.paymentCountry).to.be(expectedValueLiteral);
      });

      it('should have the property paymentId (base name: "paymentId")', function() {
        // TODO: update the code to test the property paymentId
        expect(instance).to.have.property('paymentId');
        // expect(instance.paymentId).to.be(expectedValueLiteral);
      });

      it('should have the property paymentStatus (base name: "paymentStatus")', function() {
        // TODO: update the code to test the property paymentStatus
        expect(instance).to.have.property('paymentStatus');
        // expect(instance.paymentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property paymentLocalAmount (base name: "paymentLocalAmount")', function() {
        // TODO: update the code to test the property paymentLocalAmount
        expect(instance).to.have.property('paymentLocalAmount');
        // expect(instance.paymentLocalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property paymentLocalDate (base name: "paymentLocalDate")', function() {
        // TODO: update the code to test the property paymentLocalDate
        expect(instance).to.have.property('paymentLocalDate');
        // expect(instance.paymentLocalDate).to.be(expectedValueLiteral);
      });

      it('should have the property is3DS (base name: "is3DS")', function() {
        // TODO: update the code to test the property is3DS
        expect(instance).to.have.property('is3DS');
        // expect(instance.is3DS).to.be(expectedValueLiteral);
      });

      it('should have the property posCardholderPresence (base name: "posCardholderPresence")', function() {
        // TODO: update the code to test the property posCardholderPresence
        expect(instance).to.have.property('posCardholderPresence');
        // expect(instance.posCardholderPresence).to.be(expectedValueLiteral);
      });

      it('should have the property posPostcode (base name: "posPostcode")', function() {
        // TODO: update the code to test the property posPostcode
        expect(instance).to.have.property('posPostcode');
        // expect(instance.posPostcode).to.be(expectedValueLiteral);
      });

      it('should have the property posCountry (base name: "posCountry")', function() {
        // TODO: update the code to test the property posCountry
        expect(instance).to.have.property('posCountry');
        // expect(instance.posCountry).to.be(expectedValueLiteral);
      });

      it('should have the property posTerminalId (base name: "posTerminalId")', function() {
        // TODO: update the code to test the property posTerminalId
        expect(instance).to.have.property('posTerminalId');
        // expect(instance.posTerminalId).to.be(expectedValueLiteral);
      });

      it('should have the property posCardPresence (base name: "posCardPresence")', function() {
        // TODO: update the code to test the property posCardPresence
        expect(instance).to.have.property('posCardPresence');
        // expect(instance.posCardPresence).to.be(expectedValueLiteral);
      });

      it('should have the property panEntryMethod (base name: "panEntryMethod")', function() {
        // TODO: update the code to test the property panEntryMethod
        expect(instance).to.have.property('panEntryMethod');
        // expect(instance.panEntryMethod).to.be(expectedValueLiteral);
      });

      it('should have the property authorizationNote (base name: "authorizationNote")', function() {
        // TODO: update the code to test the property authorizationNote
        expect(instance).to.have.property('authorizationNote');
        // expect(instance.authorizationNote).to.be(expectedValueLiteral);
      });

      it('should have the property authorizationResponseCode (base name: "authorizationResponseCode")', function() {
        // TODO: update the code to test the property authorizationResponseCode
        expect(instance).to.have.property('authorizationResponseCode');
        // expect(instance.authorizationResponseCode).to.be(expectedValueLiteral);
      });

      it('should have the property authorizationIssuerId (base name: "authorizationIssuerId")', function() {
        // TODO: update the code to test the property authorizationIssuerId
        expect(instance).to.have.property('authorizationIssuerId');
        // expect(instance.authorizationIssuerId).to.be(expectedValueLiteral);
      });

      it('should have the property authorizationIssuerTime (base name: "authorizationIssuerTime")', function() {
        // TODO: update the code to test the property authorizationIssuerTime
        expect(instance).to.have.property('authorizationIssuerTime');
        // expect(instance.authorizationIssuerTime).to.be(expectedValueLiteral);
      });

      it('should have the property authorizationMti (base name: "authorizationMti")', function() {
        // TODO: update the code to test the property authorizationMti
        expect(instance).to.have.property('authorizationMti');
        // expect(instance.authorizationMti).to.be(expectedValueLiteral);
      });

      it('should have the property authorizedBalance (base name: "authorizedBalance")', function() {
        // TODO: update the code to test the property authorizedBalance
        expect(instance).to.have.property('authorizedBalance');
        // expect(instance.authorizedBalance).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmYear (base name: "limitAtmYear")', function() {
        // TODO: update the code to test the property limitAtmYear
        expect(instance).to.have.property('limitAtmYear');
        // expect(instance.limitAtmYear).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmMonth (base name: "limitAtmMonth")', function() {
        // TODO: update the code to test the property limitAtmMonth
        expect(instance).to.have.property('limitAtmMonth');
        // expect(instance.limitAtmMonth).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmWeek (base name: "limitAtmWeek")', function() {
        // TODO: update the code to test the property limitAtmWeek
        expect(instance).to.have.property('limitAtmWeek');
        // expect(instance.limitAtmWeek).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmDay (base name: "limitAtmDay")', function() {
        // TODO: update the code to test the property limitAtmDay
        expect(instance).to.have.property('limitAtmDay');
        // expect(instance.limitAtmDay).to.be(expectedValueLiteral);
      });

      it('should have the property limitAtmAll (base name: "limitAtmAll")', function() {
        // TODO: update the code to test the property limitAtmAll
        expect(instance).to.have.property('limitAtmAll');
        // expect(instance.limitAtmAll).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentYear (base name: "limitPaymentYear")', function() {
        // TODO: update the code to test the property limitPaymentYear
        expect(instance).to.have.property('limitPaymentYear');
        // expect(instance.limitPaymentYear).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentMonth (base name: "limitPaymentMonth")', function() {
        // TODO: update the code to test the property limitPaymentMonth
        expect(instance).to.have.property('limitPaymentMonth');
        // expect(instance.limitPaymentMonth).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentWeek (base name: "limitPaymentWeek")', function() {
        // TODO: update the code to test the property limitPaymentWeek
        expect(instance).to.have.property('limitPaymentWeek');
        // expect(instance.limitPaymentWeek).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentDay (base name: "limitPaymentDay")', function() {
        // TODO: update the code to test the property limitPaymentDay
        expect(instance).to.have.property('limitPaymentDay');
        // expect(instance.limitPaymentDay).to.be(expectedValueLiteral);
      });

      it('should have the property limitPaymentAll (base name: "limitPaymentAll")', function() {
        // TODO: update the code to test the property limitPaymentAll
        expect(instance).to.have.property('limitPaymentAll');
        // expect(instance.limitPaymentAll).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitAtmYear (base name: "totalLimitAtmYear")', function() {
        // TODO: update the code to test the property totalLimitAtmYear
        expect(instance).to.have.property('totalLimitAtmYear');
        // expect(instance.totalLimitAtmYear).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitAtmMonth (base name: "totalLimitAtmMonth")', function() {
        // TODO: update the code to test the property totalLimitAtmMonth
        expect(instance).to.have.property('totalLimitAtmMonth');
        // expect(instance.totalLimitAtmMonth).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitAtmWeek (base name: "totalLimitAtmWeek")', function() {
        // TODO: update the code to test the property totalLimitAtmWeek
        expect(instance).to.have.property('totalLimitAtmWeek');
        // expect(instance.totalLimitAtmWeek).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitAtmDay (base name: "totalLimitAtmDay")', function() {
        // TODO: update the code to test the property totalLimitAtmDay
        expect(instance).to.have.property('totalLimitAtmDay');
        // expect(instance.totalLimitAtmDay).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitAtmAll (base name: "totalLimitAtmAll")', function() {
        // TODO: update the code to test the property totalLimitAtmAll
        expect(instance).to.have.property('totalLimitAtmAll');
        // expect(instance.totalLimitAtmAll).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitPaymentYear (base name: "totalLimitPaymentYear")', function() {
        // TODO: update the code to test the property totalLimitPaymentYear
        expect(instance).to.have.property('totalLimitPaymentYear');
        // expect(instance.totalLimitPaymentYear).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitPaymentMonth (base name: "totalLimitPaymentMonth")', function() {
        // TODO: update the code to test the property totalLimitPaymentMonth
        expect(instance).to.have.property('totalLimitPaymentMonth');
        // expect(instance.totalLimitPaymentMonth).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitPaymentWeek (base name: "totalLimitPaymentWeek")', function() {
        // TODO: update the code to test the property totalLimitPaymentWeek
        expect(instance).to.have.property('totalLimitPaymentWeek');
        // expect(instance.totalLimitPaymentWeek).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitPaymentDay (base name: "totalLimitPaymentDay")', function() {
        // TODO: update the code to test the property totalLimitPaymentDay
        expect(instance).to.have.property('totalLimitPaymentDay');
        // expect(instance.totalLimitPaymentDay).to.be(expectedValueLiteral);
      });

      it('should have the property totalLimitPaymentAll (base name: "totalLimitPaymentAll")', function() {
        // TODO: update the code to test the property totalLimitPaymentAll
        expect(instance).to.have.property('totalLimitPaymentAll');
        // expect(instance.totalLimitPaymentAll).to.be(expectedValueLiteral);
      });

      it('should have the property totalRows (base name: "totalRows")', function() {
        // TODO: update the code to test the property totalRows
        expect(instance).to.have.property('totalRows');
        // expect(instance.totalRows).to.be(expectedValueLiteral);
      });

    });
  });

}));
